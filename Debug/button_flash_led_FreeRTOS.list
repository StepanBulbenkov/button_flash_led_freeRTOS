
button_flash_led_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006178  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08006348  08006348  00007348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006384  08006384  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006384  08006384  00007384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800638c  0800638c  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800638c  0800638c  0000738c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006390  08006390  00007390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006394  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a08  2000000c  080063a0  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a14  080063a0  00008a14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001653b  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003601  00000000  00000000  0001e577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00021b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f82  00000000  00000000  00022f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000328d  00000000  00000000  00023f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179ea  00000000  00000000  0002719f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa9f4  00000000  00000000  0003eb89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013957d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053d8  00000000  00000000  001395c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003a  00000000  00000000  0013e998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006330 	.word	0x08006330

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08006330 	.word	0x08006330

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b090      	sub	sp, #64	@ 0x40
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000516:	4bae      	ldr	r3, [pc, #696]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	4aad      	ldr	r2, [pc, #692]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 800051c:	f043 0310 	orr.w	r3, r3, #16
 8000520:	6313      	str	r3, [r2, #48]	@ 0x30
 8000522:	4bab      	ldr	r3, [pc, #684]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000526:	f003 0310 	and.w	r3, r3, #16
 800052a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800052c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800052e:	4ba8      	ldr	r3, [pc, #672]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	4aa7      	ldr	r2, [pc, #668]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000534:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000538:	6313      	str	r3, [r2, #48]	@ 0x30
 800053a:	4ba5      	ldr	r3, [pc, #660]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000542:	627b      	str	r3, [r7, #36]	@ 0x24
 8000544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	4ba2      	ldr	r3, [pc, #648]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4aa1      	ldr	r2, [pc, #644]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b9f      	ldr	r3, [pc, #636]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	623b      	str	r3, [r7, #32]
 800055c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055e:	4b9c      	ldr	r3, [pc, #624]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	4a9b      	ldr	r2, [pc, #620]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000564:	f043 0308 	orr.w	r3, r3, #8
 8000568:	6313      	str	r3, [r2, #48]	@ 0x30
 800056a:	4b99      	ldr	r3, [pc, #612]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	f003 0308 	and.w	r3, r3, #8
 8000572:	61fb      	str	r3, [r7, #28]
 8000574:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b96      	ldr	r3, [pc, #600]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	4a95      	ldr	r2, [pc, #596]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	6313      	str	r3, [r2, #48]	@ 0x30
 8000582:	4b93      	ldr	r3, [pc, #588]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	61bb      	str	r3, [r7, #24]
 800058c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	4b90      	ldr	r3, [pc, #576]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	4a8f      	ldr	r2, [pc, #572]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6313      	str	r3, [r2, #48]	@ 0x30
 800059a:	4b8d      	ldr	r3, [pc, #564]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80005a6:	4b8a      	ldr	r3, [pc, #552]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a89      	ldr	r2, [pc, #548]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b87      	ldr	r3, [pc, #540]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005be:	4b84      	ldr	r3, [pc, #528]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	4a83      	ldr	r2, [pc, #524]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ca:	4b81      	ldr	r3, [pc, #516]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80005d6:	4b7e      	ldr	r3, [pc, #504]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a7d      	ldr	r2, [pc, #500]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b7b      	ldr	r3, [pc, #492]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ee:	4b78      	ldr	r3, [pc, #480]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	4a77      	ldr	r2, [pc, #476]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005f4:	f043 0320 	orr.w	r3, r3, #32
 80005f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fa:	4b75      	ldr	r3, [pc, #468]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	f003 0320 	and.w	r3, r3, #32
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000606:	4b72      	ldr	r3, [pc, #456]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a71      	ldr	r2, [pc, #452]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 800060c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
 8000612:	4b6f      	ldr	r3, [pc, #444]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	2120      	movs	r1, #32
 8000622:	486c      	ldr	r0, [pc, #432]	@ (80007d4 <MX_GPIO_Init+0x2d4>)
 8000624:	f001 fb5c 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f241 010c 	movw	r1, #4108	@ 0x100c
 800062e:	486a      	ldr	r0, [pc, #424]	@ (80007d8 <MX_GPIO_Init+0x2d8>)
 8000630:	f001 fb56 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2108      	movs	r1, #8
 8000638:	4868      	ldr	r0, [pc, #416]	@ (80007dc <MX_GPIO_Init+0x2dc>)
 800063a:	f001 fb51 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	2102      	movs	r1, #2
 8000642:	4865      	ldr	r0, [pc, #404]	@ (80007d8 <MX_GPIO_Init+0x2d8>)
 8000644:	f001 fb4c 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800064e:	4864      	ldr	r0, [pc, #400]	@ (80007e0 <MX_GPIO_Init+0x2e0>)
 8000650:	f001 fb46 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	21c8      	movs	r1, #200	@ 0xc8
 8000658:	4862      	ldr	r0, [pc, #392]	@ (80007e4 <MX_GPIO_Init+0x2e4>)
 800065a:	f001 fb41 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800065e:	2310      	movs	r3, #16
 8000660:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000662:	2302      	movs	r3, #2
 8000664:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800066e:	230e      	movs	r3, #14
 8000670:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000676:	4619      	mov	r1, r3
 8000678:	485b      	ldr	r0, [pc, #364]	@ (80007e8 <MX_GPIO_Init+0x2e8>)
 800067a:	f001 f985 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800067e:	2308      	movs	r3, #8
 8000680:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000682:	2300      	movs	r3, #0
 8000684:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800068e:	4619      	mov	r1, r3
 8000690:	4855      	ldr	r0, [pc, #340]	@ (80007e8 <MX_GPIO_Init+0x2e8>)
 8000692:	f001 f979 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000696:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800069a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a4:	2303      	movs	r3, #3
 80006a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006a8:	230b      	movs	r3, #11
 80006aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006b0:	4619      	mov	r1, r3
 80006b2:	484c      	ldr	r0, [pc, #304]	@ (80007e4 <MX_GPIO_Init+0x2e4>)
 80006b4:	f001 f968 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80006b8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80006bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c6:	2303      	movs	r3, #3
 80006c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006ca:	230c      	movs	r3, #12
 80006cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006d2:	4619      	mov	r1, r3
 80006d4:	4844      	ldr	r0, [pc, #272]	@ (80007e8 <MX_GPIO_Init+0x2e8>)
 80006d6:	f001 f957 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80006da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006e0:	2312      	movs	r3, #18
 80006e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006ec:	2304      	movs	r3, #4
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006f4:	4619      	mov	r1, r3
 80006f6:	483d      	ldr	r0, [pc, #244]	@ (80007ec <MX_GPIO_Init+0x2ec>)
 80006f8:	f001 f946 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80006fc:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000700:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070a:	2303      	movs	r3, #3
 800070c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800070e:	230a      	movs	r3, #10
 8000710:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000712:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000716:	4619      	mov	r1, r3
 8000718:	4834      	ldr	r0, [pc, #208]	@ (80007ec <MX_GPIO_Init+0x2ec>)
 800071a:	f001 f935 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800071e:	2310      	movs	r3, #16
 8000720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800072e:	2302      	movs	r3, #2
 8000730:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000736:	4619      	mov	r1, r3
 8000738:	482c      	ldr	r0, [pc, #176]	@ (80007ec <MX_GPIO_Init+0x2ec>)
 800073a:	f001 f925 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800073e:	2380      	movs	r3, #128	@ 0x80
 8000740:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800074e:	2308      	movs	r3, #8
 8000750:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000756:	4619      	mov	r1, r3
 8000758:	481e      	ldr	r0, [pc, #120]	@ (80007d4 <MX_GPIO_Init+0x2d4>)
 800075a:	f001 f915 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800075e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000762:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000770:	230c      	movs	r3, #12
 8000772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000774:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000778:	4619      	mov	r1, r3
 800077a:	481d      	ldr	r0, [pc, #116]	@ (80007f0 <MX_GPIO_Init+0x2f0>)
 800077c:	f001 f904 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000780:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000784:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	2302      	movs	r3, #2
 8000788:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000792:	2301      	movs	r3, #1
 8000794:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800079a:	4619      	mov	r1, r3
 800079c:	4815      	ldr	r0, [pc, #84]	@ (80007f4 <MX_GPIO_Init+0x2f4>)
 800079e:	f001 f8f3 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80007a2:	2360      	movs	r3, #96	@ 0x60
 80007a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007b2:	230d      	movs	r3, #13
 80007b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007ba:	4619      	mov	r1, r3
 80007bc:	480a      	ldr	r0, [pc, #40]	@ (80007e8 <MX_GPIO_Init+0x2e8>)
 80007be:	f001 f8e3 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80007c2:	2380      	movs	r3, #128	@ 0x80
 80007c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	e014      	b.n	80007f8 <MX_GPIO_Init+0x2f8>
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020c00 	.word	0x40020c00
 80007d8:	40022000 	.word	0x40022000
 80007dc:	40022800 	.word	0x40022800
 80007e0:	40021c00 	.word	0x40021c00
 80007e4:	40021800 	.word	0x40021800
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40020400 	.word	0x40020400
 80007f0:	40020800 	.word	0x40020800
 80007f4:	40020000 	.word	0x40020000
 80007f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007fe:	2307      	movs	r3, #7
 8000800:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000806:	4619      	mov	r1, r3
 8000808:	48bc      	ldr	r0, [pc, #752]	@ (8000afc <MX_GPIO_Init+0x5fc>)
 800080a:	f001 f8bd 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800080e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000812:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000820:	230c      	movs	r3, #12
 8000822:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000824:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000828:	4619      	mov	r1, r3
 800082a:	48b5      	ldr	r0, [pc, #724]	@ (8000b00 <MX_GPIO_Init+0x600>)
 800082c:	f001 f8ac 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000830:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000834:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000842:	230e      	movs	r3, #14
 8000844:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000846:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800084a:	4619      	mov	r1, r3
 800084c:	48ad      	ldr	r0, [pc, #692]	@ (8000b04 <MX_GPIO_Init+0x604>)
 800084e:	f001 f89b 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000852:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000858:	2300      	movs	r3, #0
 800085a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000864:	4619      	mov	r1, r3
 8000866:	48a7      	ldr	r0, [pc, #668]	@ (8000b04 <MX_GPIO_Init+0x604>)
 8000868:	f001 f88e 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800086c:	2340      	movs	r3, #64	@ 0x40
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000870:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000874:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800087e:	4619      	mov	r1, r3
 8000880:	48a1      	ldr	r0, [pc, #644]	@ (8000b08 <MX_GPIO_Init+0x608>)
 8000882:	f001 f881 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000886:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800088a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000898:	230c      	movs	r3, #12
 800089a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800089c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008a0:	4619      	mov	r1, r3
 80008a2:	4899      	ldr	r0, [pc, #612]	@ (8000b08 <MX_GPIO_Init+0x608>)
 80008a4:	f001 f870 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80008a8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80008ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008ba:	230a      	movs	r3, #10
 80008bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008c2:	4619      	mov	r1, r3
 80008c4:	4891      	ldr	r0, [pc, #580]	@ (8000b0c <MX_GPIO_Init+0x60c>)
 80008c6:	f001 f85f 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80008ca:	23f0      	movs	r3, #240	@ 0xf0
 80008cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80008da:	230a      	movs	r3, #10
 80008dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008e2:	4619      	mov	r1, r3
 80008e4:	488a      	ldr	r0, [pc, #552]	@ (8000b10 <MX_GPIO_Init+0x610>)
 80008e6:	f001 f84f 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80008ea:	23f7      	movs	r3, #247	@ 0xf7
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008fa:	230e      	movs	r3, #14
 80008fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80008fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000902:	4619      	mov	r1, r3
 8000904:	4883      	ldr	r0, [pc, #524]	@ (8000b14 <MX_GPIO_Init+0x614>)
 8000906:	f001 f83f 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 800090a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800090e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800091c:	2309      	movs	r3, #9
 800091e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000924:	4619      	mov	r1, r3
 8000926:	4876      	ldr	r0, [pc, #472]	@ (8000b00 <MX_GPIO_Init+0x600>)
 8000928:	f001 f82e 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800092c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000930:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800093e:	230a      	movs	r3, #10
 8000940:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000946:	4619      	mov	r1, r3
 8000948:	486d      	ldr	r0, [pc, #436]	@ (8000b00 <MX_GPIO_Init+0x600>)
 800094a:	f001 f81d 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800094e:	2320      	movs	r3, #32
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000962:	4619      	mov	r1, r3
 8000964:	4868      	ldr	r0, [pc, #416]	@ (8000b08 <MX_GPIO_Init+0x608>)
 8000966:	f001 f80f 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800096a:	2308      	movs	r3, #8
 800096c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800097a:	230d      	movs	r3, #13
 800097c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000982:	4619      	mov	r1, r3
 8000984:	4860      	ldr	r0, [pc, #384]	@ (8000b08 <MX_GPIO_Init+0x608>)
 8000986:	f000 ffff 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PI1 PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 800098a:	f241 030e 	movw	r3, #4110	@ 0x100e
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800099c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009a0:	4619      	mov	r1, r3
 80009a2:	485b      	ldr	r0, [pc, #364]	@ (8000b10 <MX_GPIO_Init+0x610>)
 80009a4:	f000 fff0 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80009a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ae:	2300      	movs	r3, #0
 80009b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ba:	4619      	mov	r1, r3
 80009bc:	4856      	ldr	r0, [pc, #344]	@ (8000b18 <MX_GPIO_Init+0x618>)
 80009be:	f000 ffe3 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80009c2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009d4:	230c      	movs	r3, #12
 80009d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009dc:	4619      	mov	r1, r3
 80009de:	484f      	ldr	r0, [pc, #316]	@ (8000b1c <MX_GPIO_Init+0x61c>)
 80009e0:	f000 ffd2 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80009e4:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009f6:	230e      	movs	r3, #14
 80009f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009fe:	4619      	mov	r1, r3
 8000a00:	4843      	ldr	r0, [pc, #268]	@ (8000b10 <MX_GPIO_Init+0x610>)
 8000a02:	f000 ffc1 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000a06:	2308      	movs	r3, #8
 8000a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	483d      	ldr	r0, [pc, #244]	@ (8000b14 <MX_GPIO_Init+0x614>)
 8000a1e:	f000 ffb3 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000a22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a34:	230d      	movs	r3, #13
 8000a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4830      	ldr	r0, [pc, #192]	@ (8000b00 <MX_GPIO_Init+0x600>)
 8000a40:	f000 ffa2 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a44:	2310      	movs	r3, #16
 8000a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a54:	4619      	mov	r1, r3
 8000a56:	482c      	ldr	r0, [pc, #176]	@ (8000b08 <MX_GPIO_Init+0x608>)
 8000a58:	f000 ff96 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a6c:	230c      	movs	r3, #12
 8000a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a74:	4619      	mov	r1, r3
 8000a76:	4824      	ldr	r0, [pc, #144]	@ (8000b08 <MX_GPIO_Init+0x608>)
 8000a78:	f000 ff86 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000a7c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4823      	ldr	r0, [pc, #140]	@ (8000b20 <MX_GPIO_Init+0x620>)
 8000a92:	f000 ff79 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000a96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aac:	4619      	mov	r1, r3
 8000aae:	481c      	ldr	r0, [pc, #112]	@ (8000b20 <MX_GPIO_Init+0x620>)
 8000ab0:	f000 ff6a 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000ab4:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ac6:	230d      	movs	r3, #13
 8000ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000aca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4813      	ldr	r0, [pc, #76]	@ (8000b20 <MX_GPIO_Init+0x620>)
 8000ad2:	f000 ff59 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aee:	4619      	mov	r1, r3
 8000af0:	4807      	ldr	r0, [pc, #28]	@ (8000b10 <MX_GPIO_Init+0x610>)
 8000af2:	f000 ff49 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000af6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000afa:	e013      	b.n	8000b24 <MX_GPIO_Init+0x624>
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40021800 	.word	0x40021800
 8000b04:	40022400 	.word	0x40022400
 8000b08:	40020c00 	.word	0x40020c00
 8000b0c:	40020000 	.word	0x40020000
 8000b10:	40022000 	.word	0x40022000
 8000b14:	40022800 	.word	0x40022800
 8000b18:	40020800 	.word	0x40020800
 8000b1c:	40021400 	.word	0x40021400
 8000b20:	40021c00 	.word	0x40021c00
 8000b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b32:	2307      	movs	r3, #7
 8000b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4898      	ldr	r0, [pc, #608]	@ (8000da0 <MX_GPIO_Init+0x8a0>)
 8000b3e:	f000 ff23 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b48:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000b4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b56:	4619      	mov	r1, r3
 8000b58:	4892      	ldr	r0, [pc, #584]	@ (8000da4 <MX_GPIO_Init+0x8a4>)
 8000b5a:	f000 ff15 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000b5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4889      	ldr	r0, [pc, #548]	@ (8000da0 <MX_GPIO_Init+0x8a0>)
 8000b7c:	f000 ff04 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000b80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b86:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b94:	4619      	mov	r1, r3
 8000b96:	4883      	ldr	r0, [pc, #524]	@ (8000da4 <MX_GPIO_Init+0x8a4>)
 8000b98:	f000 fef6 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000b9c:	23c0      	movs	r3, #192	@ 0xc0
 8000b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000bac:	2308      	movs	r3, #8
 8000bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	487c      	ldr	r0, [pc, #496]	@ (8000da8 <MX_GPIO_Init+0x8a8>)
 8000bb8:	f000 fee6 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000bcc:	230a      	movs	r3, #10
 8000bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4875      	ldr	r0, [pc, #468]	@ (8000dac <MX_GPIO_Init+0x8ac>)
 8000bd8:	f000 fed6 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000bdc:	2328      	movs	r3, #40	@ 0x28
 8000bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bec:	230c      	movs	r3, #12
 8000bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bf0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	486d      	ldr	r0, [pc, #436]	@ (8000dac <MX_GPIO_Init+0x8ac>)
 8000bf8:	f000 fec6 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000bfc:	23c8      	movs	r3, #200	@ 0xc8
 8000bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c10:	4619      	mov	r1, r3
 8000c12:	4867      	ldr	r0, [pc, #412]	@ (8000db0 <MX_GPIO_Init+0x8b0>)
 8000c14:	f000 feb8 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000c18:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4861      	ldr	r0, [pc, #388]	@ (8000db4 <MX_GPIO_Init+0x8b4>)
 8000c2e:	f000 feab 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000c32:	2308      	movs	r3, #8
 8000c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c42:	230c      	movs	r3, #12
 8000c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4856      	ldr	r0, [pc, #344]	@ (8000da8 <MX_GPIO_Init+0x8a8>)
 8000c4e:	f000 fe9b 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000c52:	2305      	movs	r3, #5
 8000c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c62:	230a      	movs	r3, #10
 8000c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	484e      	ldr	r0, [pc, #312]	@ (8000da8 <MX_GPIO_Init+0x8a8>)
 8000c6e:	f000 fe8b 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c72:	2332      	movs	r3, #50	@ 0x32
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c82:	230b      	movs	r3, #11
 8000c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4846      	ldr	r0, [pc, #280]	@ (8000da8 <MX_GPIO_Init+0x8a8>)
 8000c8e:	f000 fe7b 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000c92:	2304      	movs	r3, #4
 8000c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c96:	2300      	movs	r3, #0
 8000c98:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4842      	ldr	r0, [pc, #264]	@ (8000db0 <MX_GPIO_Init+0x8b0>)
 8000ca6:	f000 fe6f 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000caa:	2386      	movs	r3, #134	@ 0x86
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cba:	230b      	movs	r3, #11
 8000cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4836      	ldr	r0, [pc, #216]	@ (8000da0 <MX_GPIO_Init+0x8a0>)
 8000cc6:	f000 fe5f 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4830      	ldr	r0, [pc, #192]	@ (8000da0 <MX_GPIO_Init+0x8a0>)
 8000cde:	f000 fe53 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000ce2:	2350      	movs	r3, #80	@ 0x50
 8000ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000cf2:	230d      	movs	r3, #13
 8000cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4828      	ldr	r0, [pc, #160]	@ (8000da0 <MX_GPIO_Init+0x8a0>)
 8000cfe:	f000 fe43 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000d02:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d08:	2312      	movs	r3, #18
 8000d0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d14:	2304      	movs	r3, #4
 8000d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4823      	ldr	r0, [pc, #140]	@ (8000dac <MX_GPIO_Init+0x8ac>)
 8000d20:	f000 fe32 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000d24:	2328      	movs	r3, #40	@ 0x28
 8000d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d34:	230a      	movs	r3, #10
 8000d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4818      	ldr	r0, [pc, #96]	@ (8000da0 <MX_GPIO_Init+0x8a0>)
 8000d40:	f000 fe22 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000d44:	2340      	movs	r3, #64	@ 0x40
 8000d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000d54:	2309      	movs	r3, #9
 8000d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4813      	ldr	r0, [pc, #76]	@ (8000dac <MX_GPIO_Init+0x8ac>)
 8000d60:	f000 fe12 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000d64:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d76:	2305      	movs	r3, #5
 8000d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480d      	ldr	r0, [pc, #52]	@ (8000db8 <MX_GPIO_Init+0x8b8>)
 8000d82:	f000 fe01 	bl	8001988 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2105      	movs	r1, #5
 8000d8a:	2028      	movs	r0, #40	@ 0x28
 8000d8c:	f000 fd62 	bl	8001854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d90:	2028      	movs	r0, #40	@ 0x28
 8000d92:	f000 fd7b 	bl	800188c <HAL_NVIC_EnableIRQ>

}
 8000d96:	bf00      	nop
 8000d98:	3740      	adds	r7, #64	@ 0x40
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40020000 	.word	0x40020000
 8000da4:	40022000 	.word	0x40022000
 8000da8:	40020800 	.word	0x40020800
 8000dac:	40021c00 	.word	0x40021c00
 8000db0:	40021800 	.word	0x40021800
 8000db4:	40021400 	.word	0x40021400
 8000db8:	40020400 	.word	0x40020400

08000dbc <vQSPI_WriteTask>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vQSPI_WriteTask( void *pvParameters )
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
		vTaskSuspend(NULL);
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f003 fc7f 	bl	80046c8 <vTaskSuspend>
		QSPI_WRITE_DATA(&hqspi,0,&current_max,1);
 8000dca:	2301      	movs	r3, #1
 8000dcc:	4a03      	ldr	r2, [pc, #12]	@ (8000ddc <vQSPI_WriteTask+0x20>)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4803      	ldr	r0, [pc, #12]	@ (8000de0 <vQSPI_WriteTask+0x24>)
 8000dd2:	f000 f9e1 	bl	8001198 <QSPI_WRITE_DATA>
		vTaskSuspend(NULL);
 8000dd6:	bf00      	nop
 8000dd8:	e7f4      	b.n	8000dc4 <vQSPI_WriteTask+0x8>
 8000dda:	bf00      	nop
 8000ddc:	2000002c 	.word	0x2000002c
 8000de0:	20000034 	.word	0x20000034

08000de4 <vTogglePinTask>:
	}
	vTaskDelete(NULL);
}

void vTogglePinTask( void *pvParameters )
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	portTickType xLastWakeTime1 = xTaskGetTickCount();
 8000dec:	f003 feaa 	bl	8004b44 <xTaskGetTickCount>
 8000df0:	4603      	mov	r3, r0
 8000df2:	60bb      	str	r3, [r7, #8]
	for( ;; )
	{
		for(uint8_t i = 0; i < current_max; i++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	e008      	b.n	8000e0c <vTogglePinTask+0x28>
		{
			vTaskDelayUntil(&xLastWakeTime1, 50/portTICK_RATE_MS);
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	2132      	movs	r1, #50	@ 0x32
 8000e00:	4618      	mov	r0, r3
 8000e02:	f003 fba3 	bl	800454c <vTaskDelayUntil>
		for(uint8_t i = 0; i < current_max; i++)
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
 8000e0c:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <vTogglePinTask+0x3c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	7bfa      	ldrb	r2, [r7, #15]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d3f1      	bcc.n	8000dfa <vTogglePinTask+0x16>
		}
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 8000e16:	2102      	movs	r1, #2
 8000e18:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <vTogglePinTask+0x40>)
 8000e1a:	f000 ff7a 	bl	8001d12 <HAL_GPIO_TogglePin>
		for(uint8_t i = 0; i < current_max; i++)
 8000e1e:	e7e9      	b.n	8000df4 <vTogglePinTask+0x10>
 8000e20:	2000002c 	.word	0x2000002c
 8000e24:	40022000 	.word	0x40022000

08000e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e2e:	f000 fc40 	bl	80016b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e32:	f000 f839 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e36:	f7ff fb63 	bl	8000500 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8000e3a:	f000 f8f1 	bl	8001020 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  QSPI_READ_DATA(&hqspi, 0, &(current_max), 1);
 8000e3e:	2301      	movs	r3, #1
 8000e40:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <main+0x64>)
 8000e42:	2100      	movs	r1, #0
 8000e44:	4812      	ldr	r0, [pc, #72]	@ (8000e90 <main+0x68>)
 8000e46:	f000 f9e4 	bl	8001212 <QSPI_READ_DATA>
  if(current_max>100) current_max = 100;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	@ (8000e8c <main+0x64>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b64      	cmp	r3, #100	@ 0x64
 8000e50:	d902      	bls.n	8000e58 <main+0x30>
 8000e52:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <main+0x64>)
 8000e54:	2264      	movs	r2, #100	@ 0x64
 8000e56:	701a      	strb	r2, [r3, #0]
  xTaskCreate(vQSPI_WriteTask, "QSPI", 1000, NULL,9, &task);
 8000e58:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <main+0x6c>)
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	2309      	movs	r3, #9
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2300      	movs	r3, #0
 8000e62:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e66:	490c      	ldr	r1, [pc, #48]	@ (8000e98 <main+0x70>)
 8000e68:	480c      	ldr	r0, [pc, #48]	@ (8000e9c <main+0x74>)
 8000e6a:	f003 fa27 	bl	80042bc <xTaskCreate>
  xTaskCreate(vTogglePinTask, "LED", 100, NULL, 8, NULL);
 8000e6e:	2300      	movs	r3, #0
 8000e70:	9301      	str	r3, [sp, #4]
 8000e72:	2308      	movs	r3, #8
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2300      	movs	r3, #0
 8000e78:	2264      	movs	r2, #100	@ 0x64
 8000e7a:	4909      	ldr	r1, [pc, #36]	@ (8000ea0 <main+0x78>)
 8000e7c:	4809      	ldr	r0, [pc, #36]	@ (8000ea4 <main+0x7c>)
 8000e7e:	f003 fa1d 	bl	80042bc <xTaskCreate>
  vTaskStartScheduler();
 8000e82:	f003 fd45 	bl	8004910 <vTaskStartScheduler>
  /* USER CODE END 2 */


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e86:	bf00      	nop
 8000e88:	e7fd      	b.n	8000e86 <main+0x5e>
 8000e8a:	bf00      	nop
 8000e8c:	2000002c 	.word	0x2000002c
 8000e90:	20000034 	.word	0x20000034
 8000e94:	20000030 	.word	0x20000030
 8000e98:	08006348 	.word	0x08006348
 8000e9c:	08000dbd 	.word	0x08000dbd
 8000ea0:	08006350 	.word	0x08006350
 8000ea4:	08000de5 	.word	0x08000de5

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b094      	sub	sp, #80	@ 0x50
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0320 	add.w	r3, r7, #32
 8000eb2:	2230      	movs	r2, #48	@ 0x30
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f005 fa00 	bl	80062bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8000f7c <SystemClock_Config+0xd4>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8000f7c <SystemClock_Config+0xd4>)
 8000ed2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed8:	4b28      	ldr	r3, [pc, #160]	@ (8000f7c <SystemClock_Config+0xd4>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee4:	4b26      	ldr	r3, [pc, #152]	@ (8000f80 <SystemClock_Config+0xd8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a25      	ldr	r2, [pc, #148]	@ (8000f80 <SystemClock_Config+0xd8>)
 8000eea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	4b23      	ldr	r3, [pc, #140]	@ (8000f80 <SystemClock_Config+0xd8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000efc:	2301      	movs	r3, #1
 8000efe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f06:	2302      	movs	r3, #2
 8000f08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f0a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f10:	2319      	movs	r3, #25
 8000f12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000f14:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000f18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f22:	f107 0320 	add.w	r3, r7, #32
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 fbce 	bl	80026c8 <HAL_RCC_OscConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f32:	f000 f86f 	bl	8001014 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f36:	f000 ff1f 	bl	8001d78 <HAL_PWREx_EnableOverDrive>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f40:	f000 f868 	bl	8001014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f44:	230f      	movs	r3, #15
 8000f46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f50:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2107      	movs	r1, #7
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fe54 	bl	8002c10 <HAL_RCC_ClockConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f6e:	f000 f851 	bl	8001014 <Error_Handler>
  }
}
 8000f72:	bf00      	nop
 8000f74:	3750      	adds	r7, #80	@ 0x50
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40007000 	.word	0x40007000

08000f84 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]
	if(!is_pulse)
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10b      	bne.n	8000fae <HAL_GPIO_EXTI_Callback+0x2a>
	{
		is_pulse++;
 8000f96:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000fa0:	701a      	strb	r2, [r3, #0]
		xLastWakeTime = xTaskGetTickCount();
 8000fa2:	f003 fdcf 	bl	8004b44 <xTaskGetTickCount>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4a16      	ldr	r2, [pc, #88]	@ (8001004 <HAL_GPIO_EXTI_Callback+0x80>)
 8000faa:	6013      	str	r3, [r2, #0]
		is_pulse--;
		xLastWakeTime = xTaskGetTickCount() - xLastWakeTime;
		current_max = xLastWakeTime > 5000 ? 100 : xLastWakeTime / 50;
		xTaskResumeFromISR(task);
	}
}
 8000fac:	e023      	b.n	8000ff6 <HAL_GPIO_EXTI_Callback+0x72>
		is_pulse--;
 8000fae:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000fb8:	701a      	strb	r2, [r3, #0]
		xLastWakeTime = xTaskGetTickCount() - xLastWakeTime;
 8000fba:	f003 fdc3 	bl	8004b44 <xTaskGetTickCount>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <HAL_GPIO_EXTI_Callback+0x80>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	4a0f      	ldr	r2, [pc, #60]	@ (8001004 <HAL_GPIO_EXTI_Callback+0x80>)
 8000fc8:	6013      	str	r3, [r2, #0]
		current_max = xLastWakeTime > 5000 ? 100 : xLastWakeTime / 50;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <HAL_GPIO_EXTI_Callback+0x80>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d807      	bhi.n	8000fe6 <HAL_GPIO_EXTI_Callback+0x62>
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <HAL_GPIO_EXTI_Callback+0x80>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a0b      	ldr	r2, [pc, #44]	@ (8001008 <HAL_GPIO_EXTI_Callback+0x84>)
 8000fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe0:	091b      	lsrs	r3, r3, #4
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	e000      	b.n	8000fe8 <HAL_GPIO_EXTI_Callback+0x64>
 8000fe6:	2364      	movs	r3, #100	@ 0x64
 8000fe8:	4a08      	ldr	r2, [pc, #32]	@ (800100c <HAL_GPIO_EXTI_Callback+0x88>)
 8000fea:	7013      	strb	r3, [r2, #0]
		xTaskResumeFromISR(task);
 8000fec:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 fc15 	bl	8004820 <xTaskResumeFromISR>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000002d 	.word	0x2000002d
 8001004:	20000028 	.word	0x20000028
 8001008:	51eb851f 	.word	0x51eb851f
 800100c:	2000002c 	.word	0x2000002c
 8001010:	20000030 	.word	0x20000030

08001014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001018:	b672      	cpsid	i
}
 800101a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <Error_Handler+0x8>

08001020 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <MX_QUADSPI_Init+0x50>)
 8001026:	4a13      	ldr	r2, [pc, #76]	@ (8001074 <MX_QUADSPI_Init+0x54>)
 8001028:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800102a:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <MX_QUADSPI_Init+0x50>)
 800102c:	2201      	movs	r2, #1
 800102e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001030:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <MX_QUADSPI_Init+0x50>)
 8001032:	2204      	movs	r2, #4
 8001034:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <MX_QUADSPI_Init+0x50>)
 8001038:	2210      	movs	r2, #16
 800103a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800103c:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <MX_QUADSPI_Init+0x50>)
 800103e:	2217      	movs	r2, #23
 8001040:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001042:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <MX_QUADSPI_Init+0x50>)
 8001044:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001048:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800104a:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <MX_QUADSPI_Init+0x50>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001050:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <MX_QUADSPI_Init+0x50>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <MX_QUADSPI_Init+0x50>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800105c:	4804      	ldr	r0, [pc, #16]	@ (8001070 <MX_QUADSPI_Init+0x50>)
 800105e:	f000 fedb 	bl	8001e18 <HAL_QSPI_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001068:	f7ff ffd4 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000034 	.word	0x20000034
 8001074:	a0001000 	.word	0xa0001000

08001078 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08c      	sub	sp, #48	@ 0x30
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a3b      	ldr	r2, [pc, #236]	@ (8001184 <HAL_QSPI_MspInit+0x10c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d170      	bne.n	800117c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800109a:	4b3b      	ldr	r3, [pc, #236]	@ (8001188 <HAL_QSPI_MspInit+0x110>)
 800109c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800109e:	4a3a      	ldr	r2, [pc, #232]	@ (8001188 <HAL_QSPI_MspInit+0x110>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	6393      	str	r3, [r2, #56]	@ 0x38
 80010a6:	4b38      	ldr	r3, [pc, #224]	@ (8001188 <HAL_QSPI_MspInit+0x110>)
 80010a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	61bb      	str	r3, [r7, #24]
 80010b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010b2:	4b35      	ldr	r3, [pc, #212]	@ (8001188 <HAL_QSPI_MspInit+0x110>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	4a34      	ldr	r2, [pc, #208]	@ (8001188 <HAL_QSPI_MspInit+0x110>)
 80010b8:	f043 0310 	orr.w	r3, r3, #16
 80010bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010be:	4b32      	ldr	r3, [pc, #200]	@ (8001188 <HAL_QSPI_MspInit+0x110>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	f003 0310 	and.w	r3, r3, #16
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001188 <HAL_QSPI_MspInit+0x110>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a2e      	ldr	r2, [pc, #184]	@ (8001188 <HAL_QSPI_MspInit+0x110>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001188 <HAL_QSPI_MspInit+0x110>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e2:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <HAL_QSPI_MspInit+0x110>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a28      	ldr	r2, [pc, #160]	@ (8001188 <HAL_QSPI_MspInit+0x110>)
 80010e8:	f043 0308 	orr.w	r3, r3, #8
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b26      	ldr	r3, [pc, #152]	@ (8001188 <HAL_QSPI_MspInit+0x110>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80010fa:	2304      	movs	r3, #4
 80010fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800110a:	2309      	movs	r3, #9
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4619      	mov	r1, r3
 8001114:	481d      	ldr	r0, [pc, #116]	@ (800118c <HAL_QSPI_MspInit+0x114>)
 8001116:	f000 fc37 	bl	8001988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800111a:	2340      	movs	r3, #64	@ 0x40
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800112a:	230a      	movs	r3, #10
 800112c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	4816      	ldr	r0, [pc, #88]	@ (8001190 <HAL_QSPI_MspInit+0x118>)
 8001136:	f000 fc27 	bl	8001988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800113a:	2304      	movs	r3, #4
 800113c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800114a:	2309      	movs	r3, #9
 800114c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	480e      	ldr	r0, [pc, #56]	@ (8001190 <HAL_QSPI_MspInit+0x118>)
 8001156:	f000 fc17 	bl	8001988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800115a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800116c:	2309      	movs	r3, #9
 800116e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	4807      	ldr	r0, [pc, #28]	@ (8001194 <HAL_QSPI_MspInit+0x11c>)
 8001178:	f000 fc06 	bl	8001988 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800117c:	bf00      	nop
 800117e:	3730      	adds	r7, #48	@ 0x30
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	a0001000 	.word	0xa0001000
 8001188:	40023800 	.word	0x40023800
 800118c:	40021000 	.word	0x40021000
 8001190:	40020400 	.word	0x40020400
 8001194:	40020c00 	.word	0x40020c00

08001198 <QSPI_WRITE_DATA>:
	if(HAL_QSPI_Command(hqspi, &cmd, 1) != HAL_OK) Error_Handler();
	QSPI_WRITE_DIS(hqspi, &cmd);
}

void QSPI_WRITE_DATA(QSPI_HandleTypeDef* hqspi,uint32_t addr, uint8_t* data, uint32_t size)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b094      	sub	sp, #80	@ 0x50
 800119c:	af02      	add	r7, sp, #8
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	603b      	str	r3, [r7, #0]
	QSPI_CommandTypeDef cmd = {};
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	2238      	movs	r2, #56	@ 0x38
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f005 f884 	bl	80062bc <memset>
	cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 80011b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011b8:	61fb      	str	r3, [r7, #28]
	cmd.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 80011ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011be:	62bb      	str	r3, [r7, #40]	@ 0x28
	QSPI_WRITE_EN(hqspi,&cmd);
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	4619      	mov	r1, r3
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f000 f917 	bl	80013fa <QSPI_WRITE_EN>
	QSPI_ERASE_SUB4K(hqspi,&cmd,addr);
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	68ba      	ldr	r2, [r7, #8]
 80011d2:	4619      	mov	r1, r3
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f000 f948 	bl	800146a <QSPI_ERASE_SUB4K>
	vTaskDelay( 100 );
 80011da:	2064      	movs	r0, #100	@ 0x64
 80011dc:	f003 fa3c 	bl	8004658 <vTaskDelay>
	QSPI_WRITE_EN(hqspi,&cmd);
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	4619      	mov	r1, r3
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f000 f907 	bl	80013fa <QSPI_WRITE_EN>
	QSPI_WRITE(hqspi,&cmd,addr,data,size);
 80011ec:	f107 0110 	add.w	r1, r7, #16
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f000 f89e 	bl	800133a <QSPI_WRITE>
	QSPI_WRITE_DIS(hqspi,&cmd);
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	4619      	mov	r1, r3
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f000 f914 	bl	8001432 <QSPI_WRITE_DIS>
}
 800120a:	bf00      	nop
 800120c:	3748      	adds	r7, #72	@ 0x48
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <QSPI_READ_DATA>:

void QSPI_READ_DATA(QSPI_HandleTypeDef* hqspi,uint32_t addr, uint8_t* data, uint32_t size)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b096      	sub	sp, #88	@ 0x58
 8001216:	af02      	add	r7, sp, #8
 8001218:	60f8      	str	r0, [r7, #12]
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	603b      	str	r3, [r7, #0]
	uint8_t byte_vcr;
	QSPI_CommandTypeDef cmd = {};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2238      	movs	r2, #56	@ 0x38
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f005 f847 	bl	80062bc <memset>
	cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 800122e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001232:	623b      	str	r3, [r7, #32]
	cmd.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001234:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001238:	62fb      	str	r3, [r7, #44]	@ 0x2c
	cmd.Instruction = 0x9e;
 800123a:	239e      	movs	r3, #158	@ 0x9e
 800123c:	617b      	str	r3, [r7, #20]
	cmd.DataMode = QSPI_DATA_4_LINES;
 800123e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8001242:	63bb      	str	r3, [r7, #56]	@ 0x38
	cmd.NbData = 1;
 8001244:	2301      	movs	r3, #1
 8001246:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if(HAL_QSPI_Command(hqspi,&cmd,1) != HAL_OK) Error_Handler();
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2201      	movs	r2, #1
 800124e:	4619      	mov	r1, r3
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f000 fe5d 	bl	8001f10 <HAL_QSPI_Command>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <QSPI_READ_DATA+0x4e>
 800125c:	f7ff feda 	bl	8001014 <Error_Handler>
	if(HAL_QSPI_Receive(hqspi,&byte_vcr,1) != HAL_OK) Error_Handler();
 8001260:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8001264:	2201      	movs	r2, #1
 8001266:	4619      	mov	r1, r3
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f000 ff46 	bl	80020fa <HAL_QSPI_Receive>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <QSPI_READ_DATA+0x66>
 8001274:	f7ff fece 	bl	8001014 <Error_Handler>
	QSPI_WRITE_EN(hqspi,&cmd);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f000 f8bb 	bl	80013fa <QSPI_WRITE_EN>
	byte_vcr = 0x8F;
 8001284:	238f      	movs	r3, #143	@ 0x8f
 8001286:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	QSPI_WRITE_VCR(hqspi, &cmd, &byte_vcr);
 800128a:	f107 024f 	add.w	r2, r7, #79	@ 0x4f
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f000 f81e 	bl	80012d6 <QSPI_WRITE_VCR>
	QSPI_READ(hqspi, &cmd, addr, data, size);
 800129a:	f107 0114 	add.w	r1, r7, #20
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f000 f877 	bl	800139a <QSPI_READ>
	byte_vcr = 0x0F;
 80012ac:	230f      	movs	r3, #15
 80012ae:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	QSPI_WRITE_VCR(hqspi,&cmd,&byte_vcr);
 80012b2:	f107 024f 	add.w	r2, r7, #79	@ 0x4f
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f000 f80a 	bl	80012d6 <QSPI_WRITE_VCR>
	QSPI_WRITE_DIS(hqspi,&cmd);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f000 f8b2 	bl	8001432 <QSPI_WRITE_DIS>
}
 80012ce:	bf00      	nop
 80012d0:	3750      	adds	r7, #80	@ 0x50
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <QSPI_WRITE_VCR>:


void QSPI_WRITE_VCR(QSPI_HandleTypeDef* hqspi, QSPI_CommandTypeDef* cmd, uint8_t* data)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	60f8      	str	r0, [r7, #12]
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
	cmd->Instruction = cmd_write_vcr;
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2281      	movs	r2, #129	@ 0x81
 80012e6:	601a      	str	r2, [r3, #0]
	cmd->AddressMode = QSPI_ADDRESS_NONE;
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
	cmd->DataMode = QSPI_DATA_4_LINES;
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 80012f4:	625a      	str	r2, [r3, #36]	@ 0x24
	cmd->NbData = 1;
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	2201      	movs	r2, #1
 80012fa:	629a      	str	r2, [r3, #40]	@ 0x28
	if(HAL_QSPI_Command(hqspi,cmd,1) != HAL_OK) Error_Handler();
 80012fc:	2201      	movs	r2, #1
 80012fe:	68b9      	ldr	r1, [r7, #8]
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f000 fe05 	bl	8001f10 <HAL_QSPI_Command>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <QSPI_WRITE_VCR+0x3a>
 800130c:	f7ff fe82 	bl	8001014 <Error_Handler>
	if(HAL_QSPI_Transmit(hqspi,data,1) != HAL_OK) Error_Handler();
 8001310:	2201      	movs	r2, #1
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f000 fe59 	bl	8001fcc <HAL_QSPI_Transmit>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <QSPI_WRITE_VCR+0x4e>
 8001320:	f7ff fe78 	bl	8001014 <Error_Handler>
	cmd->DummyCycles = *data >> 4;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	b2db      	uxtb	r3, r3
 800132c:	461a      	mov	r2, r3
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	615a      	str	r2, [r3, #20]
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <QSPI_WRITE>:

void QSPI_WRITE(QSPI_HandleTypeDef* hqspi, QSPI_CommandTypeDef* cmd, uint32_t addr,uint8_t* data, uint32_t size)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b084      	sub	sp, #16
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	603b      	str	r3, [r7, #0]
	cmd->Instruction = cmd_write;
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	2232      	movs	r2, #50	@ 0x32
 800134c:	601a      	str	r2, [r3, #0]
	cmd->Address = addr;
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	605a      	str	r2, [r3, #4]
	cmd->AddressMode = QSPI_ADDRESS_4_LINES;
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 800135a:	61da      	str	r2, [r3, #28]
	cmd->DataMode = QSPI_DATA_4_LINES;
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 8001362:	625a      	str	r2, [r3, #36]	@ 0x24
	cmd->NbData = size;
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	629a      	str	r2, [r3, #40]	@ 0x28
	if(HAL_QSPI_Command(hqspi,cmd,1) != HAL_OK) Error_Handler();
 800136a:	2201      	movs	r2, #1
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f000 fdce 	bl	8001f10 <HAL_QSPI_Command>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <QSPI_WRITE+0x44>
 800137a:	f7ff fe4b 	bl	8001014 <Error_Handler>
	if(HAL_QSPI_Transmit(hqspi,data,1) != HAL_OK) Error_Handler();
 800137e:	2201      	movs	r2, #1
 8001380:	6839      	ldr	r1, [r7, #0]
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f000 fe22 	bl	8001fcc <HAL_QSPI_Transmit>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <QSPI_WRITE+0x58>
 800138e:	f7ff fe41 	bl	8001014 <Error_Handler>
}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <QSPI_READ>:

void QSPI_READ(QSPI_HandleTypeDef* hqspi, QSPI_CommandTypeDef* cmd, uint32_t addr, uint8_t* data, uint32_t size)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	603b      	str	r3, [r7, #0]
	cmd->Instruction = cmd_read;
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	22eb      	movs	r2, #235	@ 0xeb
 80013ac:	601a      	str	r2, [r3, #0]
	cmd->Address = addr;
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	605a      	str	r2, [r3, #4]
	cmd->AddressMode = QSPI_ADDRESS_4_LINES;
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 80013ba:	61da      	str	r2, [r3, #28]
	cmd->DataMode = QSPI_DATA_4_LINES;
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 80013c2:	625a      	str	r2, [r3, #36]	@ 0x24
	cmd->NbData = size;
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	629a      	str	r2, [r3, #40]	@ 0x28
	if(HAL_QSPI_Command(hqspi,cmd,1) != HAL_OK) Error_Handler();
 80013ca:	2201      	movs	r2, #1
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 fd9e 	bl	8001f10 <HAL_QSPI_Command>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <QSPI_READ+0x44>
 80013da:	f7ff fe1b 	bl	8001014 <Error_Handler>
	if(HAL_QSPI_Receive(hqspi,data,1) != HAL_OK) Error_Handler();
 80013de:	2201      	movs	r2, #1
 80013e0:	6839      	ldr	r1, [r7, #0]
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f000 fe89 	bl	80020fa <HAL_QSPI_Receive>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <QSPI_READ+0x58>
 80013ee:	f7ff fe11 	bl	8001014 <Error_Handler>
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <QSPI_WRITE_EN>:

void QSPI_WRITE_EN(QSPI_HandleTypeDef* hqspi, QSPI_CommandTypeDef* cmd)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
	cmd->Instruction = cmd_write_en;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	2206      	movs	r2, #6
 8001408:	601a      	str	r2, [r3, #0]
	cmd->AddressMode = QSPI_ADDRESS_NONE;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	2200      	movs	r2, #0
 800140e:	61da      	str	r2, [r3, #28]
	cmd->DataMode = QSPI_DATA_NONE;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	@ 0x24
	if(HAL_QSPI_Command(hqspi,cmd,1) != HAL_OK) Error_Handler();
 8001416:	2201      	movs	r2, #1
 8001418:	6839      	ldr	r1, [r7, #0]
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 fd78 	bl	8001f10 <HAL_QSPI_Command>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <QSPI_WRITE_EN+0x30>
 8001426:	f7ff fdf5 	bl	8001014 <Error_Handler>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <QSPI_WRITE_DIS>:

void QSPI_WRITE_DIS(QSPI_HandleTypeDef* hqspi, QSPI_CommandTypeDef* cmd)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
	cmd->Instruction = cmd_write_dis;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2204      	movs	r2, #4
 8001440:	601a      	str	r2, [r3, #0]
	cmd->AddressMode = QSPI_ADDRESS_NONE;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2200      	movs	r2, #0
 8001446:	61da      	str	r2, [r3, #28]
	cmd->DataMode = QSPI_DATA_NONE;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24
	if(HAL_QSPI_Command(hqspi,cmd,1) != HAL_OK) Error_Handler();
 800144e:	2201      	movs	r2, #1
 8001450:	6839      	ldr	r1, [r7, #0]
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 fd5c 	bl	8001f10 <HAL_QSPI_Command>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <QSPI_WRITE_DIS+0x30>
 800145e:	f7ff fdd9 	bl	8001014 <Error_Handler>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <QSPI_ERASE_SUB4K>:

void QSPI_ERASE_SUB4K(QSPI_HandleTypeDef* hqspi, QSPI_CommandTypeDef* cmd, uint32_t addr)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b084      	sub	sp, #16
 800146e:	af00      	add	r7, sp, #0
 8001470:	60f8      	str	r0, [r7, #12]
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
	cmd->Instruction = cmd_erase_sub4k;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	2220      	movs	r2, #32
 800147a:	601a      	str	r2, [r3, #0]
	cmd->Address = addr;
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	605a      	str	r2, [r3, #4]
	cmd->AddressMode = QSPI_ADDRESS_4_LINES;
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8001488:	61da      	str	r2, [r3, #28]
	cmd->DataMode = QSPI_DATA_NONE;
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	2200      	movs	r2, #0
 800148e:	625a      	str	r2, [r3, #36]	@ 0x24
	if(HAL_QSPI_Command(hqspi,cmd,1) != HAL_OK) Error_Handler();
 8001490:	2201      	movs	r2, #1
 8001492:	68b9      	ldr	r1, [r7, #8]
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f000 fd3b 	bl	8001f10 <HAL_QSPI_Command>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <QSPI_ERASE_SUB4K+0x3a>
 80014a0:	f7ff fdb8 	bl	8001014 <Error_Handler>
}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <HAL_MspInit+0x4c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	4a10      	ldr	r2, [pc, #64]	@ (80014f8 <HAL_MspInit+0x4c>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <HAL_MspInit+0x4c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <HAL_MspInit+0x4c>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ce:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <HAL_MspInit+0x4c>)
 80014d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d6:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <HAL_MspInit+0x4c>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	210f      	movs	r1, #15
 80014e6:	f06f 0001 	mvn.w	r0, #1
 80014ea:	f000 f9b3 	bl	8001854 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800

080014fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08c      	sub	sp, #48	@ 0x30
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800150c:	4b2f      	ldr	r3, [pc, #188]	@ (80015cc <HAL_InitTick+0xd0>)
 800150e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001510:	4a2e      	ldr	r2, [pc, #184]	@ (80015cc <HAL_InitTick+0xd0>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6453      	str	r3, [r2, #68]	@ 0x44
 8001518:	4b2c      	ldr	r3, [pc, #176]	@ (80015cc <HAL_InitTick+0xd0>)
 800151a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001524:	f107 020c 	add.w	r2, r7, #12
 8001528:	f107 0310 	add.w	r3, r7, #16
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f001 fd40 	bl	8002fb4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001534:	f001 fd2a 	bl	8002f8c <HAL_RCC_GetPCLK2Freq>
 8001538:	4603      	mov	r3, r0
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800153e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001540:	4a23      	ldr	r2, [pc, #140]	@ (80015d0 <HAL_InitTick+0xd4>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	0c9b      	lsrs	r3, r3, #18
 8001548:	3b01      	subs	r3, #1
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800154c:	4b21      	ldr	r3, [pc, #132]	@ (80015d4 <HAL_InitTick+0xd8>)
 800154e:	4a22      	ldr	r2, [pc, #136]	@ (80015d8 <HAL_InitTick+0xdc>)
 8001550:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001552:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <HAL_InitTick+0xd8>)
 8001554:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001558:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800155a:	4a1e      	ldr	r2, [pc, #120]	@ (80015d4 <HAL_InitTick+0xd8>)
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001560:	4b1c      	ldr	r3, [pc, #112]	@ (80015d4 <HAL_InitTick+0xd8>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001566:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <HAL_InitTick+0xd8>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156c:	4b19      	ldr	r3, [pc, #100]	@ (80015d4 <HAL_InitTick+0xd8>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001572:	4818      	ldr	r0, [pc, #96]	@ (80015d4 <HAL_InitTick+0xd8>)
 8001574:	f001 fd50 	bl	8003018 <HAL_TIM_Base_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800157e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001582:	2b00      	cmp	r3, #0
 8001584:	d11b      	bne.n	80015be <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001586:	4813      	ldr	r0, [pc, #76]	@ (80015d4 <HAL_InitTick+0xd8>)
 8001588:	f001 fda8 	bl	80030dc <HAL_TIM_Base_Start_IT>
 800158c:	4603      	mov	r3, r0
 800158e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001592:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001596:	2b00      	cmp	r3, #0
 8001598:	d111      	bne.n	80015be <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800159a:	2019      	movs	r0, #25
 800159c:	f000 f976 	bl	800188c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b0f      	cmp	r3, #15
 80015a4:	d808      	bhi.n	80015b8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80015a6:	2200      	movs	r2, #0
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	2019      	movs	r0, #25
 80015ac:	f000 f952 	bl	8001854 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015b0:	4a0a      	ldr	r2, [pc, #40]	@ (80015dc <HAL_InitTick+0xe0>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e002      	b.n	80015be <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80015be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3730      	adds	r7, #48	@ 0x30
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	431bde83 	.word	0x431bde83
 80015d4:	20000080 	.word	0x20000080
 80015d8:	40010000 	.word	0x40010000
 80015dc:	20000004 	.word	0x20000004

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <NMI_Handler+0x4>

080015e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <MemManage_Handler+0x4>

080015f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <UsageFault_Handler+0x4>

08001608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800161c:	4802      	ldr	r0, [pc, #8]	@ (8001628 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800161e:	f001 fdd5 	bl	80031cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000080 	.word	0x20000080

0800162c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001630:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001634:	f000 fb88 	bl	8001d48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}

0800163c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <SystemInit+0x20>)
 8001642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001646:	4a05      	ldr	r2, [pc, #20]	@ (800165c <SystemInit+0x20>)
 8001648:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800164c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001660:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001698 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001664:	480d      	ldr	r0, [pc, #52]	@ (800169c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001666:	490e      	ldr	r1, [pc, #56]	@ (80016a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001668:	4a0e      	ldr	r2, [pc, #56]	@ (80016a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800166c:	e002      	b.n	8001674 <LoopCopyDataInit>

0800166e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001672:	3304      	adds	r3, #4

08001674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001678:	d3f9      	bcc.n	800166e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167a:	4a0b      	ldr	r2, [pc, #44]	@ (80016a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800167c:	4c0b      	ldr	r4, [pc, #44]	@ (80016ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001680:	e001      	b.n	8001686 <LoopFillZerobss>

08001682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001684:	3204      	adds	r2, #4

08001686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001688:	d3fb      	bcc.n	8001682 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800168a:	f7ff ffd7 	bl	800163c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168e:	f004 fe1d 	bl	80062cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001692:	f7ff fbc9 	bl	8000e28 <main>
  bx  lr    
 8001696:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001698:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016a4:	08006394 	.word	0x08006394
  ldr r2, =_sbss
 80016a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016ac:	20004a14 	.word	0x20004a14

080016b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC_IRQHandler>

080016b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b6:	2003      	movs	r0, #3
 80016b8:	f000 f8c1 	bl	800183e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016bc:	200f      	movs	r0, #15
 80016be:	f7ff ff1d 	bl	80014fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c2:	f7ff fef3 	bl	80014ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return uwTick;
 80016d0:	4b03      	ldr	r3, [pc, #12]	@ (80016e0 <HAL_GetTick+0x14>)
 80016d2:	681b      	ldr	r3, [r3, #0]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	200000cc 	.word	0x200000cc

080016e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001724 <__NVIC_SetPriorityGrouping+0x40>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001700:	4013      	ands	r3, r2
 8001702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 800170e:	4313      	orrs	r3, r2
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <__NVIC_SetPriorityGrouping+0x40>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00
 8001728:	05fa0000 	.word	0x05fa0000

0800172c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001730:	4b04      	ldr	r3, [pc, #16]	@ (8001744 <__NVIC_GetPriorityGrouping+0x18>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 0307 	and.w	r3, r3, #7
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db0b      	blt.n	8001772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	f003 021f 	and.w	r2, r3, #31
 8001760:	4907      	ldr	r1, [pc, #28]	@ (8001780 <__NVIC_EnableIRQ+0x38>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	2001      	movs	r0, #1
 800176a:	fa00 f202 	lsl.w	r2, r0, r2
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000e100 	.word	0xe000e100

08001784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0a      	blt.n	80017ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	490c      	ldr	r1, [pc, #48]	@ (80017d0 <__NVIC_SetPriority+0x4c>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ac:	e00a      	b.n	80017c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4908      	ldr	r1, [pc, #32]	@ (80017d4 <__NVIC_SetPriority+0x50>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	3b04      	subs	r3, #4
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	761a      	strb	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	@ 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf28      	it	cs
 80017f6:	2304      	movcs	r3, #4
 80017f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d902      	bls.n	8001808 <NVIC_EncodePriority+0x30>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3b03      	subs	r3, #3
 8001806:	e000      	b.n	800180a <NVIC_EncodePriority+0x32>
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43d9      	mvns	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	4313      	orrs	r3, r2
         );
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	@ 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ff4c 	bl	80016e4 <__NVIC_SetPriorityGrouping>
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001866:	f7ff ff61 	bl	800172c <__NVIC_GetPriorityGrouping>
 800186a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	68b9      	ldr	r1, [r7, #8]
 8001870:	6978      	ldr	r0, [r7, #20]
 8001872:	f7ff ffb1 	bl	80017d8 <NVIC_EncodePriority>
 8001876:	4602      	mov	r2, r0
 8001878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff80 	bl	8001784 <__NVIC_SetPriority>
}
 8001884:	bf00      	nop
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ff54 	bl	8001748 <__NVIC_EnableIRQ>
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018b6:	f7ff ff09 	bl	80016cc <HAL_GetTick>
 80018ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d008      	beq.n	80018da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2280      	movs	r2, #128	@ 0x80
 80018cc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e052      	b.n	8001980 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0216 	bic.w	r2, r2, #22
 80018e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	695a      	ldr	r2, [r3, #20]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d103      	bne.n	800190a <HAL_DMA_Abort+0x62>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001906:	2b00      	cmp	r3, #0
 8001908:	d007      	beq.n	800191a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0208 	bic.w	r2, r2, #8
 8001918:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0201 	bic.w	r2, r2, #1
 8001928:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800192a:	e013      	b.n	8001954 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800192c:	f7ff fece 	bl	80016cc <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b05      	cmp	r3, #5
 8001938:	d90c      	bls.n	8001954 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2220      	movs	r2, #32
 800193e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2203      	movs	r2, #3
 8001944:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e015      	b.n	8001980 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1e4      	bne.n	800192c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001966:	223f      	movs	r2, #63	@ 0x3f
 8001968:	409a      	lsls	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	@ 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
 80019a6:	e175      	b.n	8001c94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019a8:	2201      	movs	r2, #1
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	f040 8164 	bne.w	8001c8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d005      	beq.n	80019de <HAL_GPIO_Init+0x56>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d130      	bne.n	8001a40 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	2203      	movs	r2, #3
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a14:	2201      	movs	r2, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	f003 0201 	and.w	r2, r3, #1
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d017      	beq.n	8001a7c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	2203      	movs	r2, #3
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d123      	bne.n	8001ad0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	08da      	lsrs	r2, r3, #3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3208      	adds	r2, #8
 8001a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	08da      	lsrs	r2, r3, #3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3208      	adds	r2, #8
 8001aca:	69b9      	ldr	r1, [r7, #24]
 8001acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0203 	and.w	r2, r3, #3
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 80be 	beq.w	8001c8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	4b66      	ldr	r3, [pc, #408]	@ (8001cac <HAL_GPIO_Init+0x324>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	4a65      	ldr	r2, [pc, #404]	@ (8001cac <HAL_GPIO_Init+0x324>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1e:	4b63      	ldr	r3, [pc, #396]	@ (8001cac <HAL_GPIO_Init+0x324>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b2a:	4a61      	ldr	r2, [pc, #388]	@ (8001cb0 <HAL_GPIO_Init+0x328>)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	3302      	adds	r3, #2
 8001b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	220f      	movs	r2, #15
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a58      	ldr	r2, [pc, #352]	@ (8001cb4 <HAL_GPIO_Init+0x32c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d037      	beq.n	8001bc6 <HAL_GPIO_Init+0x23e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a57      	ldr	r2, [pc, #348]	@ (8001cb8 <HAL_GPIO_Init+0x330>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d031      	beq.n	8001bc2 <HAL_GPIO_Init+0x23a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a56      	ldr	r2, [pc, #344]	@ (8001cbc <HAL_GPIO_Init+0x334>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d02b      	beq.n	8001bbe <HAL_GPIO_Init+0x236>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a55      	ldr	r2, [pc, #340]	@ (8001cc0 <HAL_GPIO_Init+0x338>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d025      	beq.n	8001bba <HAL_GPIO_Init+0x232>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a54      	ldr	r2, [pc, #336]	@ (8001cc4 <HAL_GPIO_Init+0x33c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d01f      	beq.n	8001bb6 <HAL_GPIO_Init+0x22e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a53      	ldr	r2, [pc, #332]	@ (8001cc8 <HAL_GPIO_Init+0x340>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d019      	beq.n	8001bb2 <HAL_GPIO_Init+0x22a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a52      	ldr	r2, [pc, #328]	@ (8001ccc <HAL_GPIO_Init+0x344>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d013      	beq.n	8001bae <HAL_GPIO_Init+0x226>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a51      	ldr	r2, [pc, #324]	@ (8001cd0 <HAL_GPIO_Init+0x348>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d00d      	beq.n	8001baa <HAL_GPIO_Init+0x222>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a50      	ldr	r2, [pc, #320]	@ (8001cd4 <HAL_GPIO_Init+0x34c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d007      	beq.n	8001ba6 <HAL_GPIO_Init+0x21e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4f      	ldr	r2, [pc, #316]	@ (8001cd8 <HAL_GPIO_Init+0x350>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d101      	bne.n	8001ba2 <HAL_GPIO_Init+0x21a>
 8001b9e:	2309      	movs	r3, #9
 8001ba0:	e012      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001ba2:	230a      	movs	r3, #10
 8001ba4:	e010      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001ba6:	2308      	movs	r3, #8
 8001ba8:	e00e      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001baa:	2307      	movs	r3, #7
 8001bac:	e00c      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bae:	2306      	movs	r3, #6
 8001bb0:	e00a      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bb2:	2305      	movs	r3, #5
 8001bb4:	e008      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	e006      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e004      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e002      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_GPIO_Init+0x240>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	f002 0203 	and.w	r2, r2, #3
 8001bce:	0092      	lsls	r2, r2, #2
 8001bd0:	4093      	lsls	r3, r2
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bd8:	4935      	ldr	r1, [pc, #212]	@ (8001cb0 <HAL_GPIO_Init+0x328>)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	3302      	adds	r3, #2
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001be6:	4b3d      	ldr	r3, [pc, #244]	@ (8001cdc <HAL_GPIO_Init+0x354>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c0a:	4a34      	ldr	r2, [pc, #208]	@ (8001cdc <HAL_GPIO_Init+0x354>)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c10:	4b32      	ldr	r3, [pc, #200]	@ (8001cdc <HAL_GPIO_Init+0x354>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c34:	4a29      	ldr	r2, [pc, #164]	@ (8001cdc <HAL_GPIO_Init+0x354>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c3a:	4b28      	ldr	r3, [pc, #160]	@ (8001cdc <HAL_GPIO_Init+0x354>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8001cdc <HAL_GPIO_Init+0x354>)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c64:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <HAL_GPIO_Init+0x354>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c88:	4a14      	ldr	r2, [pc, #80]	@ (8001cdc <HAL_GPIO_Init+0x354>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3301      	adds	r3, #1
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	2b0f      	cmp	r3, #15
 8001c98:	f67f ae86 	bls.w	80019a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3724      	adds	r7, #36	@ 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40013800 	.word	0x40013800
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	40020400 	.word	0x40020400
 8001cbc:	40020800 	.word	0x40020800
 8001cc0:	40020c00 	.word	0x40020c00
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40021400 	.word	0x40021400
 8001ccc:	40021800 	.word	0x40021800
 8001cd0:	40021c00 	.word	0x40021c00
 8001cd4:	40022000 	.word	0x40022000
 8001cd8:	40022400 	.word	0x40022400
 8001cdc:	40013c00 	.word	0x40013c00

08001ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
 8001cec:	4613      	mov	r3, r2
 8001cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf0:	787b      	ldrb	r3, [r7, #1]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001cfc:	e003      	b.n	8001d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cfe:	887b      	ldrh	r3, [r7, #2]
 8001d00:	041a      	lsls	r2, r3, #16
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	619a      	str	r2, [r3, #24]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b085      	sub	sp, #20
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d24:	887a      	ldrh	r2, [r7, #2]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	041a      	lsls	r2, r3, #16
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	43d9      	mvns	r1, r3
 8001d30:	887b      	ldrh	r3, [r7, #2]
 8001d32:	400b      	ands	r3, r1
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	619a      	str	r2, [r3, #24]
}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d52:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d54:	695a      	ldr	r2, [r3, #20]
 8001d56:	88fb      	ldrh	r3, [r7, #6]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d006      	beq.n	8001d6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d5e:	4a05      	ldr	r2, [pc, #20]	@ (8001d74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f90c 	bl	8000f84 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40013c00 	.word	0x40013c00

08001d78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	4b23      	ldr	r3, [pc, #140]	@ (8001e10 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	4a22      	ldr	r2, [pc, #136]	@ (8001e10 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d8e:	4b20      	ldr	r3, [pc, #128]	@ (8001e10 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001da6:	f7ff fc91 	bl	80016cc <HAL_GetTick>
 8001daa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dac:	e009      	b.n	8001dc2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dae:	f7ff fc8d 	bl	80016cc <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dbc:	d901      	bls.n	8001dc2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e022      	b.n	8001e08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dc2:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dce:	d1ee      	bne.n	8001dae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001dd0:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0f      	ldr	r2, [pc, #60]	@ (8001e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ddc:	f7ff fc76 	bl	80016cc <HAL_GetTick>
 8001de0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001de2:	e009      	b.n	8001df8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001de4:	f7ff fc72 	bl	80016cc <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001df2:	d901      	bls.n	8001df8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e007      	b.n	8001e08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001df8:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001e04:	d1ee      	bne.n	8001de4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40007000 	.word	0x40007000

08001e18 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff fc54 	bl	80016cc <HAL_GetTick>
 8001e24:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e067      	b.n	8001f00 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10b      	bne.n	8001e54 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff f917 	bl	8001078 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001e4a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fa6e 	bl	8002330 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	021a      	lsls	r2, r3, #8
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	2120      	movs	r1, #32
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fa66 	bl	800234c <QSPI_WaitFlagStateUntilTimeout>
 8001e80:	4603      	mov	r3, r0
 8001e82:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001e84:	7afb      	ldrb	r3, [r7, #11]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d135      	bne.n	8001ef6 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b1d      	ldr	r3, [pc, #116]	@ (8001f08 <HAL_QSPI_Init+0xf0>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6852      	ldr	r2, [r2, #4]
 8001e98:	0611      	lsls	r1, r2, #24
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68d2      	ldr	r2, [r2, #12]
 8001e9e:	4311      	orrs	r1, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	69d2      	ldr	r2, [r2, #28]
 8001ea4:	4311      	orrs	r1, r2
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6a12      	ldr	r2, [r2, #32]
 8001eaa:	4311      	orrs	r1, r2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	4b14      	ldr	r3, [pc, #80]	@ (8001f0c <HAL_QSPI_Init+0xf4>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6912      	ldr	r2, [r2, #16]
 8001ec2:	0411      	lsls	r1, r2, #16
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6952      	ldr	r2, [r2, #20]
 8001ec8:	4311      	orrs	r1, r2
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6992      	ldr	r2, [r2, #24]
 8001ece:	4311      	orrs	r1, r2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8001efe:	7afb      	ldrb	r3, [r7, #11]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	00ffff2f 	.word	0x00ffff2f
 8001f0c:	ffe0f8fe 	.word	0xffe0f8fe

08001f10 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff fbd6 	bl	80016cc <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_QSPI_Command+0x22>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e048      	b.n	8001fc4 <HAL_QSPI_Command+0xb4>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d137      	bne.n	8001fb6 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2120      	movs	r1, #32
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 f9f4 	bl	800234c <QSPI_WaitFlagStateUntilTimeout>
 8001f64:	4603      	mov	r3, r0
 8001f66:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d125      	bne.n	8001fba <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 fa21 	bl	80023ba <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d115      	bne.n	8001fac <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	2201      	movs	r2, #1
 8001f88:	2102      	movs	r1, #2
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 f9de 	bl	800234c <QSPI_WaitFlagStateUntilTimeout>
 8001f90:	4603      	mov	r3, r0
 8001f92:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8001f94:	7dfb      	ldrb	r3, [r7, #23]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10f      	bne.n	8001fba <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001faa:	e006      	b.n	8001fba <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001fb4:	e001      	b.n	8001fba <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8001fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	@ 0x28
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001fdc:	f7ff fb76 	bl	80016cc <HAL_GetTick>
 8001fe0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	3320      	adds	r3, #32
 8001fe8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_QSPI_Transmit+0x2e>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e07b      	b.n	80020f2 <HAL_QSPI_Transmit+0x126>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b01      	cmp	r3, #1
 800200c:	d16a      	bne.n	80020e4 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d05b      	beq.n	80020d2 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2212      	movs	r2, #18
 800201e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800204e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8002050:	e01b      	b.n	800208a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	2201      	movs	r2, #1
 800205a:	2104      	movs	r1, #4
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 f975 	bl	800234c <QSPI_WaitFlagStateUntilTimeout>
 8002062:	4603      	mov	r3, r0
 8002064:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8002066:	7ffb      	ldrb	r3, [r7, #31]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d113      	bne.n	8002094 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002070:	781a      	ldrb	r2, [r3, #0]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002084:	1e5a      	subs	r2, r3, #1
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1df      	bne.n	8002052 <HAL_QSPI_Transmit+0x86>
 8002092:	e000      	b.n	8002096 <HAL_QSPI_Transmit+0xca>
          break;
 8002094:	bf00      	nop
      }

      if (status == HAL_OK)
 8002096:	7ffb      	ldrb	r3, [r7, #31]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d115      	bne.n	80020c8 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2201      	movs	r2, #1
 80020a4:	2102      	movs	r1, #2
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f950 	bl	800234c <QSPI_WaitFlagStateUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80020b0:	7ffb      	ldrb	r3, [r7, #31]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d108      	bne.n	80020c8 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2202      	movs	r2, #2
 80020bc:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 f8bd 	bl	800223e <HAL_QSPI_Abort>
 80020c4:	4603      	mov	r3, r0
 80020c6:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80020d0:	e00a      	b.n	80020e8 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	f043 0208 	orr.w	r2, r3, #8
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	77fb      	strb	r3, [r7, #31]
 80020e2:	e001      	b.n	80020e8 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 80020e4:	2302      	movs	r3, #2
 80020e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 80020f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3720      	adds	r7, #32
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b08a      	sub	sp, #40	@ 0x28
 80020fe:	af02      	add	r7, sp, #8
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800210a:	f7ff fadf 	bl	80016cc <HAL_GetTick>
 800210e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	3320      	adds	r3, #32
 800211e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_QSPI_Receive+0x36>
 800212c:	2302      	movs	r3, #2
 800212e:	e082      	b.n	8002236 <HAL_QSPI_Receive+0x13c>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d171      	bne.n	8002228 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d062      	beq.n	8002216 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2222      	movs	r2, #34	@ 0x22
 8002154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002188:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8002192:	e01c      	b.n	80021ce <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2201      	movs	r2, #1
 800219c:	2106      	movs	r1, #6
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 f8d4 	bl	800234c <QSPI_WaitFlagStateUntilTimeout>
 80021a4:	4603      	mov	r3, r0
 80021a6:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80021a8:	7ffb      	ldrb	r3, [r7, #31]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d114      	bne.n	80021d8 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	7812      	ldrb	r2, [r2, #0]
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c8:	1e5a      	subs	r2, r3, #1
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1de      	bne.n	8002194 <HAL_QSPI_Receive+0x9a>
 80021d6:	e000      	b.n	80021da <HAL_QSPI_Receive+0xe0>
          break;
 80021d8:	bf00      	nop
      }

      if (status == HAL_OK)
 80021da:	7ffb      	ldrb	r3, [r7, #31]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d115      	bne.n	800220c <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2201      	movs	r2, #1
 80021e8:	2102      	movs	r1, #2
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f8ae 	bl	800234c <QSPI_WaitFlagStateUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80021f4:	7ffb      	ldrb	r3, [r7, #31]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d108      	bne.n	800220c <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2202      	movs	r2, #2
 8002200:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f81b 	bl	800223e <HAL_QSPI_Abort>
 8002208:	4603      	mov	r3, r0
 800220a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002214:	e00a      	b.n	800222c <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	f043 0208 	orr.w	r2, r3, #8
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	77fb      	strb	r3, [r7, #31]
 8002226:	e001      	b.n	800222c <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002228:	2302      	movs	r3, #2
 800222a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8002234:	7ffb      	ldrb	r3, [r7, #31]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3720      	adds	r7, #32
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b086      	sub	sp, #24
 8002242:	af02      	add	r7, sp, #8
 8002244:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800224a:	f7ff fa3f 	bl	80016cc <HAL_GetTick>
 800224e:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d062      	beq.n	8002326 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d017      	beq.n	80022a6 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0204 	bic.w	r2, r2, #4
 8002284:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fb0c 	bl	80018a8 <HAL_DMA_Abort>
 8002290:	4603      	mov	r3, r0
 8002292:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	f043 0204 	orr.w	r2, r3, #4
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d034      	beq.n	800231e <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0202 	orr.w	r2, r2, #2
 80022c2:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2201      	movs	r2, #1
 80022ce:	2102      	movs	r1, #2
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f83b 	bl	800234c <QSPI_WaitFlagStateUntilTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10e      	bne.n	80022fe <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2202      	movs	r2, #2
 80022e6:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2200      	movs	r2, #0
 80022f2:	2120      	movs	r1, #32
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f829 	bl	800234c <QSPI_WaitFlagStateUntilTimeout>
 80022fa:	4603      	mov	r3, r0
 80022fc:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d110      	bne.n	8002326 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8002312:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800231c:	e003      	b.n	8002326 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }
  }

  return status;
 8002326:	7bfb      	ldrb	r3, [r7, #15]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	4613      	mov	r3, r2
 800235a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800235c:	e01a      	b.n	8002394 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002364:	d016      	beq.n	8002394 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002366:	f7ff f9b1 	bl	80016cc <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	429a      	cmp	r2, r3
 8002374:	d302      	bcc.n	800237c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10b      	bne.n	8002394 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2204      	movs	r2, #4
 8002380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002388:	f043 0201 	orr.w	r2, r3, #1
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e00e      	b.n	80023b2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	4013      	ands	r3, r2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf14      	ite	ne
 80023a2:	2301      	movne	r3, #1
 80023a4:	2300      	moveq	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d1d6      	bne.n	800235e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b085      	sub	sp, #20
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <QSPI_Config+0x28>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80023d4:	d005      	beq.n	80023e2 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	3a01      	subs	r2, #1
 80023e0:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 80b9 	beq.w	800255e <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d05f      	beq.n	80024b4 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	6892      	ldr	r2, [r2, #8]
 80023fc:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d031      	beq.n	800246a <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	431a      	orrs	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002414:	431a      	orrs	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241a:	431a      	orrs	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	049b      	lsls	r3, r3, #18
 8002422:	431a      	orrs	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	431a      	orrs	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	431a      	orrs	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	431a      	orrs	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	431a      	orrs	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	431a      	orrs	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	ea42 0103 	orr.w	r1, r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	430a      	orrs	r2, r1
 8002452:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800245a:	f000 812e 	beq.w	80026ba <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	6852      	ldr	r2, [r2, #4]
 8002466:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8002468:	e127      	b.n	80026ba <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	431a      	orrs	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002478:	431a      	orrs	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	431a      	orrs	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	049b      	lsls	r3, r3, #18
 8002486:	431a      	orrs	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	431a      	orrs	r2, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	431a      	orrs	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	431a      	orrs	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	431a      	orrs	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	ea42 0103 	orr.w	r1, r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	615a      	str	r2, [r3, #20]
}
 80024b2:	e102      	b.n	80026ba <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d02e      	beq.n	800251a <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c4:	431a      	orrs	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ca:	431a      	orrs	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d0:	431a      	orrs	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	049b      	lsls	r3, r3, #18
 80024d8:	431a      	orrs	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	431a      	orrs	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	431a      	orrs	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	ea42 0103 	orr.w	r1, r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	430a      	orrs	r2, r1
 8002502:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800250a:	f000 80d6 	beq.w	80026ba <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	6852      	ldr	r2, [r2, #4]
 8002516:	619a      	str	r2, [r3, #24]
}
 8002518:	e0cf      	b.n	80026ba <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	431a      	orrs	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002528:	431a      	orrs	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	431a      	orrs	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	049b      	lsls	r3, r3, #18
 8002536:	431a      	orrs	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	431a      	orrs	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	431a      	orrs	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	431a      	orrs	r2, r3
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	ea42 0103 	orr.w	r1, r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	430a      	orrs	r2, r1
 800255a:	615a      	str	r2, [r3, #20]
}
 800255c:	e0ad      	b.n	80026ba <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d058      	beq.n	8002618 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	6892      	ldr	r2, [r2, #8]
 800256e:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d02d      	beq.n	80025d4 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002580:	431a      	orrs	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002586:	431a      	orrs	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258c:	431a      	orrs	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	049b      	lsls	r3, r3, #18
 8002594:	431a      	orrs	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	431a      	orrs	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	ea42 0103 	orr.w	r1, r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	430a      	orrs	r2, r1
 80025be:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80025c6:	d078      	beq.n	80026ba <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	6852      	ldr	r2, [r2, #4]
 80025d0:	619a      	str	r2, [r3, #24]
}
 80025d2:	e072      	b.n	80026ba <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	431a      	orrs	r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e2:	431a      	orrs	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e8:	431a      	orrs	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	049b      	lsls	r3, r3, #18
 80025f0:	431a      	orrs	r2, r3
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	431a      	orrs	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	431a      	orrs	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	ea42 0103 	orr.w	r1, r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	430a      	orrs	r2, r1
 8002614:	615a      	str	r2, [r3, #20]
}
 8002616:	e050      	b.n	80026ba <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d02a      	beq.n	8002676 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002628:	431a      	orrs	r2, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800262e:	431a      	orrs	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	431a      	orrs	r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	049b      	lsls	r3, r3, #18
 800263c:	431a      	orrs	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	431a      	orrs	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	431a      	orrs	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	431a      	orrs	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	ea42 0103 	orr.w	r1, r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	430a      	orrs	r2, r1
 8002660:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8002668:	d027      	beq.n	80026ba <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	6852      	ldr	r2, [r2, #4]
 8002672:	619a      	str	r2, [r3, #24]
}
 8002674:	e021      	b.n	80026ba <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267a:	2b00      	cmp	r3, #0
 800267c:	d01d      	beq.n	80026ba <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	431a      	orrs	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800268c:	431a      	orrs	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	431a      	orrs	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	049b      	lsls	r3, r3, #18
 800269a:	431a      	orrs	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	ea42 0103 	orr.w	r1, r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	615a      	str	r2, [r3, #20]
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80026d0:	2300      	movs	r3, #0
 80026d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e291      	b.n	8002c02 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8087 	beq.w	80027fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026ec:	4b96      	ldr	r3, [pc, #600]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d00c      	beq.n	8002712 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026f8:	4b93      	ldr	r3, [pc, #588]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b08      	cmp	r3, #8
 8002702:	d112      	bne.n	800272a <HAL_RCC_OscConfig+0x62>
 8002704:	4b90      	ldr	r3, [pc, #576]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800270c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002710:	d10b      	bne.n	800272a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002712:	4b8d      	ldr	r3, [pc, #564]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d06c      	beq.n	80027f8 <HAL_RCC_OscConfig+0x130>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d168      	bne.n	80027f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e26b      	b.n	8002c02 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002732:	d106      	bne.n	8002742 <HAL_RCC_OscConfig+0x7a>
 8002734:	4b84      	ldr	r3, [pc, #528]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a83      	ldr	r2, [pc, #524]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 800273a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	e02e      	b.n	80027a0 <HAL_RCC_OscConfig+0xd8>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10c      	bne.n	8002764 <HAL_RCC_OscConfig+0x9c>
 800274a:	4b7f      	ldr	r3, [pc, #508]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a7e      	ldr	r2, [pc, #504]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002750:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	4b7c      	ldr	r3, [pc, #496]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a7b      	ldr	r2, [pc, #492]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 800275c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	e01d      	b.n	80027a0 <HAL_RCC_OscConfig+0xd8>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0xc0>
 800276e:	4b76      	ldr	r3, [pc, #472]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a75      	ldr	r2, [pc, #468]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002774:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	4b73      	ldr	r3, [pc, #460]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a72      	ldr	r2, [pc, #456]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e00b      	b.n	80027a0 <HAL_RCC_OscConfig+0xd8>
 8002788:	4b6f      	ldr	r3, [pc, #444]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a6e      	ldr	r2, [pc, #440]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 800278e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	4b6c      	ldr	r3, [pc, #432]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a6b      	ldr	r2, [pc, #428]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 800279a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800279e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d013      	beq.n	80027d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7fe ff90 	bl	80016cc <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b0:	f7fe ff8c 	bl	80016cc <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	@ 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e21f      	b.n	8002c02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	4b61      	ldr	r3, [pc, #388]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0xe8>
 80027ce:	e014      	b.n	80027fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7fe ff7c 	bl	80016cc <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe ff78 	bl	80016cc <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	@ 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e20b      	b.n	8002c02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ea:	4b57      	ldr	r3, [pc, #348]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x110>
 80027f6:	e000      	b.n	80027fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d069      	beq.n	80028da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002806:	4b50      	ldr	r3, [pc, #320]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00b      	beq.n	800282a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002812:	4b4d      	ldr	r3, [pc, #308]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b08      	cmp	r3, #8
 800281c:	d11c      	bne.n	8002858 <HAL_RCC_OscConfig+0x190>
 800281e:	4b4a      	ldr	r3, [pc, #296]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d116      	bne.n	8002858 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282a:	4b47      	ldr	r3, [pc, #284]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d005      	beq.n	8002842 <HAL_RCC_OscConfig+0x17a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d001      	beq.n	8002842 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e1df      	b.n	8002c02 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002842:	4b41      	ldr	r3, [pc, #260]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	493d      	ldr	r1, [pc, #244]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002856:	e040      	b.n	80028da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d023      	beq.n	80028a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002860:	4b39      	ldr	r3, [pc, #228]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a38      	ldr	r2, [pc, #224]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7fe ff2e 	bl	80016cc <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002874:	f7fe ff2a 	bl	80016cc <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e1bd      	b.n	8002c02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002886:	4b30      	ldr	r3, [pc, #192]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	4b2d      	ldr	r3, [pc, #180]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4929      	ldr	r1, [pc, #164]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]
 80028a6:	e018      	b.n	80028da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028a8:	4b27      	ldr	r3, [pc, #156]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a26      	ldr	r2, [pc, #152]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7fe ff0a 	bl	80016cc <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028bc:	f7fe ff06 	bl	80016cc <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e199      	b.n	8002c02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d038      	beq.n	8002958 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d019      	beq.n	8002922 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ee:	4b16      	ldr	r3, [pc, #88]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 80028f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028f2:	4a15      	ldr	r2, [pc, #84]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fa:	f7fe fee7 	bl	80016cc <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002902:	f7fe fee3 	bl	80016cc <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e176      	b.n	8002c02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002914:	4b0c      	ldr	r3, [pc, #48]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x23a>
 8002920:	e01a      	b.n	8002958 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002922:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002926:	4a08      	ldr	r2, [pc, #32]	@ (8002948 <HAL_RCC_OscConfig+0x280>)
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292e:	f7fe fecd 	bl	80016cc <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002934:	e00a      	b.n	800294c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002936:	f7fe fec9 	bl	80016cc <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d903      	bls.n	800294c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e15c      	b.n	8002c02 <HAL_RCC_OscConfig+0x53a>
 8002948:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294c:	4b91      	ldr	r3, [pc, #580]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 800294e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1ee      	bne.n	8002936 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 80a4 	beq.w	8002aae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002966:	4b8b      	ldr	r3, [pc, #556]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10d      	bne.n	800298e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002972:	4b88      	ldr	r3, [pc, #544]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	4a87      	ldr	r2, [pc, #540]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800297c:	6413      	str	r3, [r2, #64]	@ 0x40
 800297e:	4b85      	ldr	r3, [pc, #532]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800298a:	2301      	movs	r3, #1
 800298c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800298e:	4b82      	ldr	r3, [pc, #520]	@ (8002b98 <HAL_RCC_OscConfig+0x4d0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d118      	bne.n	80029cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800299a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b98 <HAL_RCC_OscConfig+0x4d0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a7e      	ldr	r2, [pc, #504]	@ (8002b98 <HAL_RCC_OscConfig+0x4d0>)
 80029a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a6:	f7fe fe91 	bl	80016cc <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ae:	f7fe fe8d 	bl	80016cc <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b64      	cmp	r3, #100	@ 0x64
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e120      	b.n	8002c02 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c0:	4b75      	ldr	r3, [pc, #468]	@ (8002b98 <HAL_RCC_OscConfig+0x4d0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d106      	bne.n	80029e2 <HAL_RCC_OscConfig+0x31a>
 80029d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e0:	e02d      	b.n	8002a3e <HAL_RCC_OscConfig+0x376>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCC_OscConfig+0x33c>
 80029ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ee:	4a69      	ldr	r2, [pc, #420]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029f6:	4b67      	ldr	r3, [pc, #412]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029fa:	4a66      	ldr	r2, [pc, #408]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 80029fc:	f023 0304 	bic.w	r3, r3, #4
 8002a00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a02:	e01c      	b.n	8002a3e <HAL_RCC_OscConfig+0x376>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b05      	cmp	r3, #5
 8002a0a:	d10c      	bne.n	8002a26 <HAL_RCC_OscConfig+0x35e>
 8002a0c:	4b61      	ldr	r3, [pc, #388]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a10:	4a60      	ldr	r2, [pc, #384]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002a12:	f043 0304 	orr.w	r3, r3, #4
 8002a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a18:	4b5e      	ldr	r3, [pc, #376]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1c:	4a5d      	ldr	r2, [pc, #372]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a24:	e00b      	b.n	8002a3e <HAL_RCC_OscConfig+0x376>
 8002a26:	4b5b      	ldr	r3, [pc, #364]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a2a:	4a5a      	ldr	r2, [pc, #360]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002a2c:	f023 0301 	bic.w	r3, r3, #1
 8002a30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a32:	4b58      	ldr	r3, [pc, #352]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a36:	4a57      	ldr	r2, [pc, #348]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002a38:	f023 0304 	bic.w	r3, r3, #4
 8002a3c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d015      	beq.n	8002a72 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a46:	f7fe fe41 	bl	80016cc <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4c:	e00a      	b.n	8002a64 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4e:	f7fe fe3d 	bl	80016cc <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e0ce      	b.n	8002c02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a64:	4b4b      	ldr	r3, [pc, #300]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0ee      	beq.n	8002a4e <HAL_RCC_OscConfig+0x386>
 8002a70:	e014      	b.n	8002a9c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a72:	f7fe fe2b 	bl	80016cc <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a78:	e00a      	b.n	8002a90 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7a:	f7fe fe27 	bl	80016cc <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e0b8      	b.n	8002c02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a90:	4b40      	ldr	r3, [pc, #256]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1ee      	bne.n	8002a7a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a9c:	7dfb      	ldrb	r3, [r7, #23]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d105      	bne.n	8002aae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	4a3b      	ldr	r2, [pc, #236]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002aa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aac:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 80a4 	beq.w	8002c00 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ab8:	4b36      	ldr	r3, [pc, #216]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 030c 	and.w	r3, r3, #12
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d06b      	beq.n	8002b9c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d149      	bne.n	8002b60 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002acc:	4b31      	ldr	r3, [pc, #196]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a30      	ldr	r2, [pc, #192]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002ad2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad8:	f7fe fdf8 	bl	80016cc <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae0:	f7fe fdf4 	bl	80016cc <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e087      	b.n	8002c02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af2:	4b28      	ldr	r3, [pc, #160]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0c:	019b      	lsls	r3, r3, #6
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b14:	085b      	lsrs	r3, r3, #1
 8002b16:	3b01      	subs	r3, #1
 8002b18:	041b      	lsls	r3, r3, #16
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b20:	061b      	lsls	r3, r3, #24
 8002b22:	4313      	orrs	r3, r2
 8002b24:	4a1b      	ldr	r2, [pc, #108]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002b26:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002b2a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b2c:	4b19      	ldr	r3, [pc, #100]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a18      	ldr	r2, [pc, #96]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002b32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7fe fdc8 	bl	80016cc <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b40:	f7fe fdc4 	bl	80016cc <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e057      	b.n	8002c02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b52:	4b10      	ldr	r3, [pc, #64]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x478>
 8002b5e:	e04f      	b.n	8002c00 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b60:	4b0c      	ldr	r3, [pc, #48]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0b      	ldr	r2, [pc, #44]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002b66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fdae 	bl	80016cc <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b74:	f7fe fdaa 	bl	80016cc <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e03d      	b.n	8002c02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b86:	4b03      	ldr	r3, [pc, #12]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x4ac>
 8002b92:	e035      	b.n	8002c00 <HAL_RCC_OscConfig+0x538>
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c0c <HAL_RCC_OscConfig+0x544>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d028      	beq.n	8002bfc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d121      	bne.n	8002bfc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d11a      	bne.n	8002bfc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bcc:	4013      	ands	r3, r2
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bd2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d111      	bne.n	8002bfc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be2:	085b      	lsrs	r3, r3, #1
 8002be4:	3b01      	subs	r3, #1
 8002be6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d107      	bne.n	8002bfc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800

08002c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0d0      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c28:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d910      	bls.n	8002c58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b67      	ldr	r3, [pc, #412]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 020f 	bic.w	r2, r3, #15
 8002c3e:	4965      	ldr	r1, [pc, #404]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b63      	ldr	r3, [pc, #396]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0b8      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d020      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c70:	4b59      	ldr	r3, [pc, #356]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4a58      	ldr	r2, [pc, #352]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c88:	4b53      	ldr	r3, [pc, #332]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4a52      	ldr	r2, [pc, #328]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c94:	4b50      	ldr	r3, [pc, #320]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	494d      	ldr	r1, [pc, #308]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d040      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d107      	bne.n	8002cca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cba:	4b47      	ldr	r3, [pc, #284]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d115      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e07f      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d107      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd2:	4b41      	ldr	r3, [pc, #260]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e073      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce2:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e06b      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf2:	4b39      	ldr	r3, [pc, #228]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f023 0203 	bic.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4936      	ldr	r1, [pc, #216]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d04:	f7fe fce2 	bl	80016cc <HAL_GetTick>
 8002d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0c:	f7fe fcde 	bl	80016cc <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e053      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 020c 	and.w	r2, r3, #12
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d1eb      	bne.n	8002d0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d34:	4b27      	ldr	r3, [pc, #156]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 030f 	and.w	r3, r3, #15
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d210      	bcs.n	8002d64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d42:	4b24      	ldr	r3, [pc, #144]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 020f 	bic.w	r2, r3, #15
 8002d4a:	4922      	ldr	r1, [pc, #136]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d52:	4b20      	ldr	r3, [pc, #128]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e032      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d70:	4b19      	ldr	r3, [pc, #100]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4916      	ldr	r1, [pc, #88]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d009      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d8e:	4b12      	ldr	r3, [pc, #72]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	490e      	ldr	r1, [pc, #56]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002da2:	f000 f821 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 8002da6:	4602      	mov	r2, r0
 8002da8:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	490a      	ldr	r1, [pc, #40]	@ (8002ddc <HAL_RCC_ClockConfig+0x1cc>)
 8002db4:	5ccb      	ldrb	r3, [r1, r3]
 8002db6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dba:	4a09      	ldr	r2, [pc, #36]	@ (8002de0 <HAL_RCC_ClockConfig+0x1d0>)
 8002dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dbe:	4b09      	ldr	r3, [pc, #36]	@ (8002de4 <HAL_RCC_ClockConfig+0x1d4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe fb9a 	bl	80014fc <HAL_InitTick>

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40023c00 	.word	0x40023c00
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	0800636c 	.word	0x0800636c
 8002de0:	20000000 	.word	0x20000000
 8002de4:	20000004 	.word	0x20000004

08002de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dec:	b090      	sub	sp, #64	@ 0x40
 8002dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002df4:	2300      	movs	r3, #0
 8002df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002df8:	2300      	movs	r3, #0
 8002dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e00:	4b59      	ldr	r3, [pc, #356]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 030c 	and.w	r3, r3, #12
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d00d      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x40>
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	f200 80a1 	bhi.w	8002f54 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0x34>
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e1a:	e09b      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e1c:	4b53      	ldr	r3, [pc, #332]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x184>)
 8002e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e20:	e09b      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e22:	4b53      	ldr	r3, [pc, #332]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e26:	e098      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e28:	4b4f      	ldr	r3, [pc, #316]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e32:	4b4d      	ldr	r3, [pc, #308]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d028      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	099b      	lsrs	r3, r3, #6
 8002e44:	2200      	movs	r2, #0
 8002e46:	623b      	str	r3, [r7, #32]
 8002e48:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e50:	2100      	movs	r1, #0
 8002e52:	4b47      	ldr	r3, [pc, #284]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e54:	fb03 f201 	mul.w	r2, r3, r1
 8002e58:	2300      	movs	r3, #0
 8002e5a:	fb00 f303 	mul.w	r3, r0, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	4a43      	ldr	r2, [pc, #268]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e62:	fba0 1202 	umull	r1, r2, r0, r2
 8002e66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e68:	460a      	mov	r2, r1
 8002e6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002e6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e6e:	4413      	add	r3, r2
 8002e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e74:	2200      	movs	r2, #0
 8002e76:	61bb      	str	r3, [r7, #24]
 8002e78:	61fa      	str	r2, [r7, #28]
 8002e7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e82:	f7fd f9c5 	bl	8000210 <__aeabi_uldivmod>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e8e:	e053      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e90:	4b35      	ldr	r3, [pc, #212]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	099b      	lsrs	r3, r3, #6
 8002e96:	2200      	movs	r2, #0
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	617a      	str	r2, [r7, #20]
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ea2:	f04f 0b00 	mov.w	fp, #0
 8002ea6:	4652      	mov	r2, sl
 8002ea8:	465b      	mov	r3, fp
 8002eaa:	f04f 0000 	mov.w	r0, #0
 8002eae:	f04f 0100 	mov.w	r1, #0
 8002eb2:	0159      	lsls	r1, r3, #5
 8002eb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb8:	0150      	lsls	r0, r2, #5
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	ebb2 080a 	subs.w	r8, r2, sl
 8002ec2:	eb63 090b 	sbc.w	r9, r3, fp
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ed2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ed6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002eda:	ebb2 0408 	subs.w	r4, r2, r8
 8002ede:	eb63 0509 	sbc.w	r5, r3, r9
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	00eb      	lsls	r3, r5, #3
 8002eec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ef0:	00e2      	lsls	r2, r4, #3
 8002ef2:	4614      	mov	r4, r2
 8002ef4:	461d      	mov	r5, r3
 8002ef6:	eb14 030a 	adds.w	r3, r4, sl
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	eb45 030b 	adc.w	r3, r5, fp
 8002f00:	607b      	str	r3, [r7, #4]
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f0e:	4629      	mov	r1, r5
 8002f10:	028b      	lsls	r3, r1, #10
 8002f12:	4621      	mov	r1, r4
 8002f14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f18:	4621      	mov	r1, r4
 8002f1a:	028a      	lsls	r2, r1, #10
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f22:	2200      	movs	r2, #0
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	60fa      	str	r2, [r7, #12]
 8002f28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f2c:	f7fd f970 	bl	8000210 <__aeabi_uldivmod>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4613      	mov	r3, r2
 8002f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f38:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	0c1b      	lsrs	r3, r3, #16
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	3301      	adds	r3, #1
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002f48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f52:	e002      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f54:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x184>)
 8002f56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3740      	adds	r7, #64	@ 0x40
 8002f60:	46bd      	mov	sp, r7
 8002f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	00f42400 	.word	0x00f42400
 8002f70:	017d7840 	.word	0x017d7840

08002f74 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f78:	4b03      	ldr	r3, [pc, #12]	@ (8002f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000000 	.word	0x20000000

08002f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f90:	f7ff fff0 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002f94:	4602      	mov	r2, r0
 8002f96:	4b05      	ldr	r3, [pc, #20]	@ (8002fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	0b5b      	lsrs	r3, r3, #13
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	4903      	ldr	r1, [pc, #12]	@ (8002fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa2:	5ccb      	ldrb	r3, [r1, r3]
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	0800637c 	.word	0x0800637c

08002fb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	220f      	movs	r2, #15
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fc4:	4b12      	ldr	r3, [pc, #72]	@ (8003010 <HAL_RCC_GetClockConfig+0x5c>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 0203 	and.w	r2, r3, #3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003010 <HAL_RCC_GetClockConfig+0x5c>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003010 <HAL_RCC_GetClockConfig+0x5c>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002fe8:	4b09      	ldr	r3, [pc, #36]	@ (8003010 <HAL_RCC_GetClockConfig+0x5c>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	08db      	lsrs	r3, r3, #3
 8002fee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ff6:	4b07      	ldr	r3, [pc, #28]	@ (8003014 <HAL_RCC_GetClockConfig+0x60>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 020f 	and.w	r2, r3, #15
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	601a      	str	r2, [r3, #0]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800
 8003014:	40023c00 	.word	0x40023c00

08003018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e049      	b.n	80030be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f841 	bl	80030c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3304      	adds	r3, #4
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f000 fa0a 	bl	8003470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d001      	beq.n	80030f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e054      	b.n	800319e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a26      	ldr	r2, [pc, #152]	@ (80031ac <HAL_TIM_Base_Start_IT+0xd0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d022      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800311e:	d01d      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a22      	ldr	r2, [pc, #136]	@ (80031b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d018      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a21      	ldr	r2, [pc, #132]	@ (80031b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d013      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a1f      	ldr	r2, [pc, #124]	@ (80031b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00e      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a1e      	ldr	r2, [pc, #120]	@ (80031bc <HAL_TIM_Base_Start_IT+0xe0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d009      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1c      	ldr	r2, [pc, #112]	@ (80031c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d004      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x80>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1b      	ldr	r2, [pc, #108]	@ (80031c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d115      	bne.n	8003188 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	4b19      	ldr	r3, [pc, #100]	@ (80031c8 <HAL_TIM_Base_Start_IT+0xec>)
 8003164:	4013      	ands	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b06      	cmp	r3, #6
 800316c:	d015      	beq.n	800319a <HAL_TIM_Base_Start_IT+0xbe>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003174:	d011      	beq.n	800319a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003186:	e008      	b.n	800319a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	e000      	b.n	800319c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40010000 	.word	0x40010000
 80031b0:	40000400 	.word	0x40000400
 80031b4:	40000800 	.word	0x40000800
 80031b8:	40000c00 	.word	0x40000c00
 80031bc:	40010400 	.word	0x40010400
 80031c0:	40014000 	.word	0x40014000
 80031c4:	40001800 	.word	0x40001800
 80031c8:	00010007 	.word	0x00010007

080031cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d122      	bne.n	8003228 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d11b      	bne.n	8003228 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0202 	mvn.w	r2, #2
 80031f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f90f 	bl	8003432 <HAL_TIM_IC_CaptureCallback>
 8003214:	e005      	b.n	8003222 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f901 	bl	800341e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f912 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b04      	cmp	r3, #4
 8003234:	d122      	bne.n	800327c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b04      	cmp	r3, #4
 8003242:	d11b      	bne.n	800327c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0204 	mvn.w	r2, #4
 800324c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2202      	movs	r2, #2
 8003252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f8e5 	bl	8003432 <HAL_TIM_IC_CaptureCallback>
 8003268:	e005      	b.n	8003276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f8d7 	bl	800341e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f8e8 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b08      	cmp	r3, #8
 8003288:	d122      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b08      	cmp	r3, #8
 8003296:	d11b      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0208 	mvn.w	r2, #8
 80032a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2204      	movs	r2, #4
 80032a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f8bb 	bl	8003432 <HAL_TIM_IC_CaptureCallback>
 80032bc:	e005      	b.n	80032ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f8ad 	bl	800341e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f8be 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	2b10      	cmp	r3, #16
 80032dc:	d122      	bne.n	8003324 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	2b10      	cmp	r3, #16
 80032ea:	d11b      	bne.n	8003324 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0210 	mvn.w	r2, #16
 80032f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2208      	movs	r2, #8
 80032fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f891 	bl	8003432 <HAL_TIM_IC_CaptureCallback>
 8003310:	e005      	b.n	800331e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f883 	bl	800341e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f894 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d10e      	bne.n	8003350 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d107      	bne.n	8003350 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 0201 	mvn.w	r2, #1
 8003348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f85d 	bl	800340a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335a:	2b80      	cmp	r3, #128	@ 0x80
 800335c:	d10e      	bne.n	800337c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003368:	2b80      	cmp	r3, #128	@ 0x80
 800336a:	d107      	bne.n	800337c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f924 	bl	80035c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003386:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800338a:	d10e      	bne.n	80033aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003396:	2b80      	cmp	r3, #128	@ 0x80
 8003398:	d107      	bne.n	80033aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80033a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f917 	bl	80035d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b4:	2b40      	cmp	r3, #64	@ 0x40
 80033b6:	d10e      	bne.n	80033d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c2:	2b40      	cmp	r3, #64	@ 0x40
 80033c4:	d107      	bne.n	80033d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f842 	bl	800345a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d10e      	bne.n	8003402 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d107      	bne.n	8003402 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f06f 0220 	mvn.w	r2, #32
 80033fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f8d7 	bl	80035b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a40      	ldr	r2, [pc, #256]	@ (8003584 <TIM_Base_SetConfig+0x114>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d013      	beq.n	80034b0 <TIM_Base_SetConfig+0x40>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800348e:	d00f      	beq.n	80034b0 <TIM_Base_SetConfig+0x40>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a3d      	ldr	r2, [pc, #244]	@ (8003588 <TIM_Base_SetConfig+0x118>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00b      	beq.n	80034b0 <TIM_Base_SetConfig+0x40>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a3c      	ldr	r2, [pc, #240]	@ (800358c <TIM_Base_SetConfig+0x11c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d007      	beq.n	80034b0 <TIM_Base_SetConfig+0x40>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a3b      	ldr	r2, [pc, #236]	@ (8003590 <TIM_Base_SetConfig+0x120>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d003      	beq.n	80034b0 <TIM_Base_SetConfig+0x40>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a3a      	ldr	r2, [pc, #232]	@ (8003594 <TIM_Base_SetConfig+0x124>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d108      	bne.n	80034c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a2f      	ldr	r2, [pc, #188]	@ (8003584 <TIM_Base_SetConfig+0x114>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d02b      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034d0:	d027      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003588 <TIM_Base_SetConfig+0x118>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d023      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a2b      	ldr	r2, [pc, #172]	@ (800358c <TIM_Base_SetConfig+0x11c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d01f      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a2a      	ldr	r2, [pc, #168]	@ (8003590 <TIM_Base_SetConfig+0x120>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d01b      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a29      	ldr	r2, [pc, #164]	@ (8003594 <TIM_Base_SetConfig+0x124>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d017      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a28      	ldr	r2, [pc, #160]	@ (8003598 <TIM_Base_SetConfig+0x128>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d013      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a27      	ldr	r2, [pc, #156]	@ (800359c <TIM_Base_SetConfig+0x12c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00f      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a26      	ldr	r2, [pc, #152]	@ (80035a0 <TIM_Base_SetConfig+0x130>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00b      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a25      	ldr	r2, [pc, #148]	@ (80035a4 <TIM_Base_SetConfig+0x134>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d007      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a24      	ldr	r2, [pc, #144]	@ (80035a8 <TIM_Base_SetConfig+0x138>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d003      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a23      	ldr	r2, [pc, #140]	@ (80035ac <TIM_Base_SetConfig+0x13c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d108      	bne.n	8003534 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4313      	orrs	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a0a      	ldr	r2, [pc, #40]	@ (8003584 <TIM_Base_SetConfig+0x114>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d003      	beq.n	8003568 <TIM_Base_SetConfig+0xf8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a0c      	ldr	r2, [pc, #48]	@ (8003594 <TIM_Base_SetConfig+0x124>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d103      	bne.n	8003570 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	615a      	str	r2, [r3, #20]
}
 8003576:	bf00      	nop
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40010000 	.word	0x40010000
 8003588:	40000400 	.word	0x40000400
 800358c:	40000800 	.word	0x40000800
 8003590:	40000c00 	.word	0x40000c00
 8003594:	40010400 	.word	0x40010400
 8003598:	40014000 	.word	0x40014000
 800359c:	40014400 	.word	0x40014400
 80035a0:	40014800 	.word	0x40014800
 80035a4:	40001800 	.word	0x40001800
 80035a8:	40001c00 	.word	0x40001c00
 80035ac:	40002000 	.word	0x40002000

080035b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4a07      	ldr	r2, [pc, #28]	@ (8003618 <vApplicationGetIdleTaskMemory+0x2c>)
 80035fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4a06      	ldr	r2, [pc, #24]	@ (800361c <vApplicationGetIdleTaskMemory+0x30>)
 8003602:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2280      	movs	r2, #128	@ 0x80
 8003608:	601a      	str	r2, [r3, #0]
}
 800360a:	bf00      	nop
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	200000d0 	.word	0x200000d0
 800361c:	2000012c 	.word	0x2000012c

08003620 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4a07      	ldr	r2, [pc, #28]	@ (800364c <vApplicationGetTimerTaskMemory+0x2c>)
 8003630:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	4a06      	ldr	r2, [pc, #24]	@ (8003650 <vApplicationGetTimerTaskMemory+0x30>)
 8003636:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800363e:	601a      	str	r2, [r3, #0]
}
 8003640:	bf00      	nop
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	2000032c 	.word	0x2000032c
 8003650:	20000388 	.word	0x20000388

08003654 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f103 0208 	add.w	r2, r3, #8
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f04f 32ff 	mov.w	r2, #4294967295
 800366c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f103 0208 	add.w	r2, r3, #8
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f103 0208 	add.w	r2, r3, #8
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036ae:	b480      	push	{r7}
 80036b0:	b085      	sub	sp, #20
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	601a      	str	r2, [r3, #0]
}
 80036ea:	bf00      	nop
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036f6:	b480      	push	{r7}
 80036f8:	b085      	sub	sp, #20
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370c:	d103      	bne.n	8003716 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	e00c      	b.n	8003730 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3308      	adds	r3, #8
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	e002      	b.n	8003724 <vListInsert+0x2e>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	429a      	cmp	r2, r3
 800372e:	d2f6      	bcs.n	800371e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	601a      	str	r2, [r3, #0]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6892      	ldr	r2, [r2, #8]
 800377e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6852      	ldr	r2, [r2, #4]
 8003788:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	429a      	cmp	r2, r3
 8003792:	d103      	bne.n	800379c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	1e5a      	subs	r2, r3, #1
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10d      	bne.n	80037ec <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d4:	b672      	cpsid	i
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	b662      	cpsie	i
 80037e4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80037e6:	bf00      	nop
 80037e8:	bf00      	nop
 80037ea:	e7fd      	b.n	80037e8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80037ec:	f002 fa4e 	bl	8005c8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f8:	68f9      	ldr	r1, [r7, #12]
 80037fa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	441a      	add	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800381c:	3b01      	subs	r3, #1
 800381e:	68f9      	ldr	r1, [r7, #12]
 8003820:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003822:	fb01 f303 	mul.w	r3, r1, r3
 8003826:	441a      	add	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	22ff      	movs	r2, #255	@ 0xff
 8003830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	22ff      	movs	r2, #255	@ 0xff
 8003838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d114      	bne.n	800386c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d01a      	beq.n	8003880 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3310      	adds	r3, #16
 800384e:	4618      	mov	r0, r3
 8003850:	f001 fafa 	bl	8004e48 <xTaskRemoveFromEventList>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d012      	beq.n	8003880 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800385a:	4b0d      	ldr	r3, [pc, #52]	@ (8003890 <xQueueGenericReset+0xd4>)
 800385c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	e009      	b.n	8003880 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3310      	adds	r3, #16
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff feef 	bl	8003654 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3324      	adds	r3, #36	@ 0x24
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff feea 	bl	8003654 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003880:	f002 fa3a 	bl	8005cf8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003884:	2301      	movs	r3, #1
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	e000ed04 	.word	0xe000ed04

08003894 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08e      	sub	sp, #56	@ 0x38
 8003898:	af02      	add	r7, sp, #8
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10d      	bne.n	80038c4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80038a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ac:	b672      	cpsid	i
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	b662      	cpsie	i
 80038bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80038be:	bf00      	nop
 80038c0:	bf00      	nop
 80038c2:	e7fd      	b.n	80038c0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10d      	bne.n	80038e6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80038ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ce:	b672      	cpsid	i
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	b662      	cpsie	i
 80038de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80038e0:	bf00      	nop
 80038e2:	bf00      	nop
 80038e4:	e7fd      	b.n	80038e2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <xQueueGenericCreateStatic+0x5e>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <xQueueGenericCreateStatic+0x62>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <xQueueGenericCreateStatic+0x64>
 80038f6:	2300      	movs	r3, #0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10d      	bne.n	8003918 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003900:	b672      	cpsid	i
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	b662      	cpsie	i
 8003910:	623b      	str	r3, [r7, #32]
}
 8003912:	bf00      	nop
 8003914:	bf00      	nop
 8003916:	e7fd      	b.n	8003914 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d102      	bne.n	8003924 <xQueueGenericCreateStatic+0x90>
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <xQueueGenericCreateStatic+0x94>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <xQueueGenericCreateStatic+0x96>
 8003928:	2300      	movs	r3, #0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10d      	bne.n	800394a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800392e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003932:	b672      	cpsid	i
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	b662      	cpsie	i
 8003942:	61fb      	str	r3, [r7, #28]
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop
 8003948:	e7fd      	b.n	8003946 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800394a:	2350      	movs	r3, #80	@ 0x50
 800394c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b50      	cmp	r3, #80	@ 0x50
 8003952:	d00d      	beq.n	8003970 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8003954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003958:	b672      	cpsid	i
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	b662      	cpsie	i
 8003968:	61bb      	str	r3, [r7, #24]
}
 800396a:	bf00      	nop
 800396c:	bf00      	nop
 800396e:	e7fd      	b.n	800396c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003970:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00d      	beq.n	8003998 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800397c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003984:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	4613      	mov	r3, r2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 f805 	bl	80039a2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800399a:	4618      	mov	r0, r3
 800399c:	3730      	adds	r7, #48	@ 0x30
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b084      	sub	sp, #16
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
 80039ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d103      	bne.n	80039be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	e002      	b.n	80039c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039d0:	2101      	movs	r1, #1
 80039d2:	69b8      	ldr	r0, [r7, #24]
 80039d4:	f7ff fef2 	bl	80037bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039e0:	bf00      	nop
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08e      	sub	sp, #56	@ 0x38
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039f6:	2300      	movs	r3, #0
 80039f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80039fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10d      	bne.n	8003a20 <xQueueGenericSend+0x38>
	__asm volatile
 8003a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a08:	b672      	cpsid	i
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	b662      	cpsie	i
 8003a18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a1a:	bf00      	nop
 8003a1c:	bf00      	nop
 8003a1e:	e7fd      	b.n	8003a1c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d103      	bne.n	8003a2e <xQueueGenericSend+0x46>
 8003a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <xQueueGenericSend+0x4a>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <xQueueGenericSend+0x4c>
 8003a32:	2300      	movs	r3, #0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10d      	bne.n	8003a54 <xQueueGenericSend+0x6c>
	__asm volatile
 8003a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3c:	b672      	cpsid	i
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	b662      	cpsie	i
 8003a4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a4e:	bf00      	nop
 8003a50:	bf00      	nop
 8003a52:	e7fd      	b.n	8003a50 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d103      	bne.n	8003a62 <xQueueGenericSend+0x7a>
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <xQueueGenericSend+0x7e>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <xQueueGenericSend+0x80>
 8003a66:	2300      	movs	r3, #0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10d      	bne.n	8003a88 <xQueueGenericSend+0xa0>
	__asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a70:	b672      	cpsid	i
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	b662      	cpsie	i
 8003a80:	623b      	str	r3, [r7, #32]
}
 8003a82:	bf00      	nop
 8003a84:	bf00      	nop
 8003a86:	e7fd      	b.n	8003a84 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a88:	f001 fba6 	bl	80051d8 <xTaskGetSchedulerState>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d102      	bne.n	8003a98 <xQueueGenericSend+0xb0>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <xQueueGenericSend+0xb4>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e000      	b.n	8003a9e <xQueueGenericSend+0xb6>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10d      	bne.n	8003abe <xQueueGenericSend+0xd6>
	__asm volatile
 8003aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa6:	b672      	cpsid	i
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	b662      	cpsie	i
 8003ab6:	61fb      	str	r3, [r7, #28]
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	e7fd      	b.n	8003aba <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003abe:	f002 f8e5 	bl	8005c8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d302      	bcc.n	8003ad4 <xQueueGenericSend+0xec>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d129      	bne.n	8003b28 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	68b9      	ldr	r1, [r7, #8]
 8003ad8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ada:	f000 fa1b 	bl	8003f14 <prvCopyDataToQueue>
 8003ade:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d010      	beq.n	8003b0a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aea:	3324      	adds	r3, #36	@ 0x24
 8003aec:	4618      	mov	r0, r3
 8003aee:	f001 f9ab 	bl	8004e48 <xTaskRemoveFromEventList>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d013      	beq.n	8003b20 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003af8:	4b3f      	ldr	r3, [pc, #252]	@ (8003bf8 <xQueueGenericSend+0x210>)
 8003afa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	e00a      	b.n	8003b20 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d007      	beq.n	8003b20 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b10:	4b39      	ldr	r3, [pc, #228]	@ (8003bf8 <xQueueGenericSend+0x210>)
 8003b12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b20:	f002 f8ea 	bl	8005cf8 <vPortExitCritical>
				return pdPASS;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e063      	b.n	8003bf0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d103      	bne.n	8003b36 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b2e:	f002 f8e3 	bl	8005cf8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	e05c      	b.n	8003bf0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d106      	bne.n	8003b4a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b3c:	f107 0314 	add.w	r3, r7, #20
 8003b40:	4618      	mov	r0, r3
 8003b42:	f001 f9e7 	bl	8004f14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b46:	2301      	movs	r3, #1
 8003b48:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b4a:	f002 f8d5 	bl	8005cf8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b4e:	f000 ff4b 	bl	80049e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b52:	f002 f89b 	bl	8005c8c <vPortEnterCritical>
 8003b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b5c:	b25b      	sxtb	r3, r3
 8003b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b62:	d103      	bne.n	8003b6c <xQueueGenericSend+0x184>
 8003b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b72:	b25b      	sxtb	r3, r3
 8003b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b78:	d103      	bne.n	8003b82 <xQueueGenericSend+0x19a>
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b82:	f002 f8b9 	bl	8005cf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b86:	1d3a      	adds	r2, r7, #4
 8003b88:	f107 0314 	add.w	r3, r7, #20
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f001 f9d6 	bl	8004f40 <xTaskCheckForTimeOut>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d124      	bne.n	8003be4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b9c:	f000 fab2 	bl	8004104 <prvIsQueueFull>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d018      	beq.n	8003bd8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba8:	3310      	adds	r3, #16
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	4611      	mov	r1, r2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 f8f4 	bl	8004d9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003bb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bb6:	f000 fa3d 	bl	8004034 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003bba:	f000 ff23 	bl	8004a04 <xTaskResumeAll>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f47f af7c 	bne.w	8003abe <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf8 <xQueueGenericSend+0x210>)
 8003bc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	e772      	b.n	8003abe <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bda:	f000 fa2b 	bl	8004034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bde:	f000 ff11 	bl	8004a04 <xTaskResumeAll>
 8003be2:	e76c      	b.n	8003abe <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003be4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003be6:	f000 fa25 	bl	8004034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bea:	f000 ff0b 	bl	8004a04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003bee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3738      	adds	r7, #56	@ 0x38
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	e000ed04 	.word	0xe000ed04

08003bfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08e      	sub	sp, #56	@ 0x38
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10d      	bne.n	8003c30 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c18:	b672      	cpsid	i
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	b662      	cpsie	i
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c2a:	bf00      	nop
 8003c2c:	bf00      	nop
 8003c2e:	e7fd      	b.n	8003c2c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d103      	bne.n	8003c3e <xQueueGenericSendFromISR+0x42>
 8003c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <xQueueGenericSendFromISR+0x46>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <xQueueGenericSendFromISR+0x48>
 8003c42:	2300      	movs	r3, #0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10d      	bne.n	8003c64 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8003c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c4c:	b672      	cpsid	i
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	b662      	cpsie	i
 8003c5c:	623b      	str	r3, [r7, #32]
}
 8003c5e:	bf00      	nop
 8003c60:	bf00      	nop
 8003c62:	e7fd      	b.n	8003c60 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d103      	bne.n	8003c72 <xQueueGenericSendFromISR+0x76>
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <xQueueGenericSendFromISR+0x7a>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <xQueueGenericSendFromISR+0x7c>
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10d      	bne.n	8003c98 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8003c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c80:	b672      	cpsid	i
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	b662      	cpsie	i
 8003c90:	61fb      	str	r3, [r7, #28]
}
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	e7fd      	b.n	8003c94 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c98:	f002 f8e0 	bl	8005e5c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c9c:	f3ef 8211 	mrs	r2, BASEPRI
 8003ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca4:	b672      	cpsid	i
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	b662      	cpsie	i
 8003cb4:	61ba      	str	r2, [r7, #24]
 8003cb6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003cb8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d302      	bcc.n	8003cce <xQueueGenericSendFromISR+0xd2>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d12c      	bne.n	8003d28 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cde:	f000 f919 	bl	8003f14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ce2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cea:	d112      	bne.n	8003d12 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d016      	beq.n	8003d22 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf6:	3324      	adds	r3, #36	@ 0x24
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f001 f8a5 	bl	8004e48 <xTaskRemoveFromEventList>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00e      	beq.n	8003d22 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00b      	beq.n	8003d22 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	e007      	b.n	8003d22 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d16:	3301      	adds	r3, #1
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	b25a      	sxtb	r2, r3
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003d22:	2301      	movs	r3, #1
 8003d24:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003d26:	e001      	b.n	8003d2c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d2e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3738      	adds	r7, #56	@ 0x38
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08c      	sub	sp, #48	@ 0x30
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d50:	2300      	movs	r3, #0
 8003d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10d      	bne.n	8003d7a <xQueueReceive+0x36>
	__asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d62:	b672      	cpsid	i
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	b662      	cpsie	i
 8003d72:	623b      	str	r3, [r7, #32]
}
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop
 8003d78:	e7fd      	b.n	8003d76 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d103      	bne.n	8003d88 <xQueueReceive+0x44>
 8003d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <xQueueReceive+0x48>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <xQueueReceive+0x4a>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10d      	bne.n	8003dae <xQueueReceive+0x6a>
	__asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d96:	b672      	cpsid	i
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	b662      	cpsie	i
 8003da6:	61fb      	str	r3, [r7, #28]
}
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	e7fd      	b.n	8003daa <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dae:	f001 fa13 	bl	80051d8 <xTaskGetSchedulerState>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <xQueueReceive+0x7a>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <xQueueReceive+0x7e>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <xQueueReceive+0x80>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10d      	bne.n	8003de4 <xQueueReceive+0xa0>
	__asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dcc:	b672      	cpsid	i
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	b662      	cpsie	i
 8003ddc:	61bb      	str	r3, [r7, #24]
}
 8003dde:	bf00      	nop
 8003de0:	bf00      	nop
 8003de2:	e7fd      	b.n	8003de0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003de4:	f001 ff52 	bl	8005c8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01f      	beq.n	8003e34 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003df8:	f000 f8f6 	bl	8003fe8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfe:	1e5a      	subs	r2, r3, #1
 8003e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e02:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00f      	beq.n	8003e2c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0e:	3310      	adds	r3, #16
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 f819 	bl	8004e48 <xTaskRemoveFromEventList>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d007      	beq.n	8003e2c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e1c:	4b3c      	ldr	r3, [pc, #240]	@ (8003f10 <xQueueReceive+0x1cc>)
 8003e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e2c:	f001 ff64 	bl	8005cf8 <vPortExitCritical>
				return pdPASS;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e069      	b.n	8003f08 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d103      	bne.n	8003e42 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e3a:	f001 ff5d 	bl	8005cf8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e062      	b.n	8003f08 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d106      	bne.n	8003e56 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e48:	f107 0310 	add.w	r3, r7, #16
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f001 f861 	bl	8004f14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e52:	2301      	movs	r3, #1
 8003e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e56:	f001 ff4f 	bl	8005cf8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e5a:	f000 fdc5 	bl	80049e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e5e:	f001 ff15 	bl	8005c8c <vPortEnterCritical>
 8003e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e68:	b25b      	sxtb	r3, r3
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6e:	d103      	bne.n	8003e78 <xQueueReceive+0x134>
 8003e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e7e:	b25b      	sxtb	r3, r3
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d103      	bne.n	8003e8e <xQueueReceive+0x14a>
 8003e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e8e:	f001 ff33 	bl	8005cf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e92:	1d3a      	adds	r2, r7, #4
 8003e94:	f107 0310 	add.w	r3, r7, #16
 8003e98:	4611      	mov	r1, r2
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f001 f850 	bl	8004f40 <xTaskCheckForTimeOut>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d123      	bne.n	8003eee <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ea6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ea8:	f000 f916 	bl	80040d8 <prvIsQueueEmpty>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d017      	beq.n	8003ee2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb4:	3324      	adds	r3, #36	@ 0x24
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	4611      	mov	r1, r2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 ff6e 	bl	8004d9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ec0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ec2:	f000 f8b7 	bl	8004034 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ec6:	f000 fd9d 	bl	8004a04 <xTaskResumeAll>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d189      	bne.n	8003de4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f10 <xQueueReceive+0x1cc>)
 8003ed2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	e780      	b.n	8003de4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ee2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ee4:	f000 f8a6 	bl	8004034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ee8:	f000 fd8c 	bl	8004a04 <xTaskResumeAll>
 8003eec:	e77a      	b.n	8003de4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003eee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ef0:	f000 f8a0 	bl	8004034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ef4:	f000 fd86 	bl	8004a04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ef8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003efa:	f000 f8ed 	bl	80040d8 <prvIsQueueEmpty>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f43f af6f 	beq.w	8003de4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3730      	adds	r7, #48	@ 0x30
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	e000ed04 	.word	0xe000ed04

08003f14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10d      	bne.n	8003f4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d14d      	bne.n	8003fd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f001 f968 	bl	8005214 <xTaskPriorityDisinherit>
 8003f44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	e043      	b.n	8003fd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d119      	bne.n	8003f88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6858      	ldr	r0, [r3, #4]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	68b9      	ldr	r1, [r7, #8]
 8003f60:	f002 f9d8 	bl	8006314 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6c:	441a      	add	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d32b      	bcc.n	8003fd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	605a      	str	r2, [r3, #4]
 8003f86:	e026      	b.n	8003fd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	68d8      	ldr	r0, [r3, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	461a      	mov	r2, r3
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	f002 f9be 	bl	8006314 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa0:	425b      	negs	r3, r3
 8003fa2:	441a      	add	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d207      	bcs.n	8003fc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbc:	425b      	negs	r3, r3
 8003fbe:	441a      	add	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d105      	bne.n	8003fd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003fde:	697b      	ldr	r3, [r7, #20]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d018      	beq.n	800402c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	441a      	add	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	429a      	cmp	r2, r3
 8004012:	d303      	bcc.n	800401c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68d9      	ldr	r1, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004024:	461a      	mov	r2, r3
 8004026:	6838      	ldr	r0, [r7, #0]
 8004028:	f002 f974 	bl	8006314 <memcpy>
	}
}
 800402c:	bf00      	nop
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800403c:	f001 fe26 	bl	8005c8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004046:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004048:	e011      	b.n	800406e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	2b00      	cmp	r3, #0
 8004050:	d012      	beq.n	8004078 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3324      	adds	r3, #36	@ 0x24
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fef6 	bl	8004e48 <xTaskRemoveFromEventList>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004062:	f000 ffd5 	bl	8005010 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	3b01      	subs	r3, #1
 800406a:	b2db      	uxtb	r3, r3
 800406c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800406e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004072:	2b00      	cmp	r3, #0
 8004074:	dce9      	bgt.n	800404a <prvUnlockQueue+0x16>
 8004076:	e000      	b.n	800407a <prvUnlockQueue+0x46>
					break;
 8004078:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	22ff      	movs	r2, #255	@ 0xff
 800407e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004082:	f001 fe39 	bl	8005cf8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004086:	f001 fe01 	bl	8005c8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004090:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004092:	e011      	b.n	80040b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d012      	beq.n	80040c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3310      	adds	r3, #16
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fed1 	bl	8004e48 <xTaskRemoveFromEventList>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040ac:	f000 ffb0 	bl	8005010 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040b0:	7bbb      	ldrb	r3, [r7, #14]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	dce9      	bgt.n	8004094 <prvUnlockQueue+0x60>
 80040c0:	e000      	b.n	80040c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	22ff      	movs	r2, #255	@ 0xff
 80040c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80040cc:	f001 fe14 	bl	8005cf8 <vPortExitCritical>
}
 80040d0:	bf00      	nop
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040e0:	f001 fdd4 	bl	8005c8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d102      	bne.n	80040f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	e001      	b.n	80040f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040f6:	f001 fdff 	bl	8005cf8 <vPortExitCritical>

	return xReturn;
 80040fa:	68fb      	ldr	r3, [r7, #12]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800410c:	f001 fdbe 	bl	8005c8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004118:	429a      	cmp	r2, r3
 800411a:	d102      	bne.n	8004122 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800411c:	2301      	movs	r3, #1
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	e001      	b.n	8004126 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004126:	f001 fde7 	bl	8005cf8 <vPortExitCritical>

	return xReturn;
 800412a:	68fb      	ldr	r3, [r7, #12]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800413e:	2300      	movs	r3, #0
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	e014      	b.n	800416e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004144:	4a0f      	ldr	r2, [pc, #60]	@ (8004184 <vQueueAddToRegistry+0x50>)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10b      	bne.n	8004168 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004150:	490c      	ldr	r1, [pc, #48]	@ (8004184 <vQueueAddToRegistry+0x50>)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800415a:	4a0a      	ldr	r2, [pc, #40]	@ (8004184 <vQueueAddToRegistry+0x50>)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	4413      	add	r3, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004166:	e006      	b.n	8004176 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3301      	adds	r3, #1
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b07      	cmp	r3, #7
 8004172:	d9e7      	bls.n	8004144 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004174:	bf00      	nop
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000788 	.word	0x20000788

08004188 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004198:	f001 fd78 	bl	8005c8c <vPortEnterCritical>
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041a2:	b25b      	sxtb	r3, r3
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a8:	d103      	bne.n	80041b2 <vQueueWaitForMessageRestricted+0x2a>
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041b8:	b25b      	sxtb	r3, r3
 80041ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041be:	d103      	bne.n	80041c8 <vQueueWaitForMessageRestricted+0x40>
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041c8:	f001 fd96 	bl	8005cf8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d106      	bne.n	80041e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	3324      	adds	r3, #36	@ 0x24
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fe05 	bl	8004dec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80041e2:	6978      	ldr	r0, [r7, #20]
 80041e4:	f7ff ff26 	bl	8004034 <prvUnlockQueue>
	}
 80041e8:	bf00      	nop
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08e      	sub	sp, #56	@ 0x38
 80041f4:	af04      	add	r7, sp, #16
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80041fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10d      	bne.n	8004220 <xTaskCreateStatic+0x30>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004208:	b672      	cpsid	i
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	b662      	cpsie	i
 8004218:	623b      	str	r3, [r7, #32]
}
 800421a:	bf00      	nop
 800421c:	bf00      	nop
 800421e:	e7fd      	b.n	800421c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10d      	bne.n	8004242 <xTaskCreateStatic+0x52>
	__asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422a:	b672      	cpsid	i
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	b662      	cpsie	i
 800423a:	61fb      	str	r3, [r7, #28]
}
 800423c:	bf00      	nop
 800423e:	bf00      	nop
 8004240:	e7fd      	b.n	800423e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004242:	235c      	movs	r3, #92	@ 0x5c
 8004244:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	2b5c      	cmp	r3, #92	@ 0x5c
 800424a:	d00d      	beq.n	8004268 <xTaskCreateStatic+0x78>
	__asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004250:	b672      	cpsid	i
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	b662      	cpsie	i
 8004260:	61bb      	str	r3, [r7, #24]
}
 8004262:	bf00      	nop
 8004264:	bf00      	nop
 8004266:	e7fd      	b.n	8004264 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004268:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800426a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01e      	beq.n	80042ae <xTaskCreateStatic+0xbe>
 8004270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004272:	2b00      	cmp	r3, #0
 8004274:	d01b      	beq.n	80042ae <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004278:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800427e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004282:	2202      	movs	r2, #2
 8004284:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004288:	2300      	movs	r3, #0
 800428a:	9303      	str	r3, [sp, #12]
 800428c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428e:	9302      	str	r3, [sp, #8]
 8004290:	f107 0314 	add.w	r3, r7, #20
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f850 	bl	8004346 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80042a8:	f000 f8e0 	bl	800446c <prvAddNewTaskToReadyList>
 80042ac:	e001      	b.n	80042b2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042b2:	697b      	ldr	r3, [r7, #20]
	}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3728      	adds	r7, #40	@ 0x28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08c      	sub	sp, #48	@ 0x30
 80042c0:	af04      	add	r7, sp, #16
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042cc:	88fb      	ldrh	r3, [r7, #6]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f001 fe09 	bl	8005ee8 <pvPortMalloc>
 80042d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00e      	beq.n	80042fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80042de:	205c      	movs	r0, #92	@ 0x5c
 80042e0:	f001 fe02 	bl	8005ee8 <pvPortMalloc>
 80042e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80042f2:	e005      	b.n	8004300 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80042f4:	6978      	ldr	r0, [r7, #20]
 80042f6:	f001 fec5 	bl	8006084 <vPortFree>
 80042fa:	e001      	b.n	8004300 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d017      	beq.n	8004336 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800430e:	88fa      	ldrh	r2, [r7, #6]
 8004310:	2300      	movs	r3, #0
 8004312:	9303      	str	r3, [sp, #12]
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	9302      	str	r3, [sp, #8]
 8004318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800431a:	9301      	str	r3, [sp, #4]
 800431c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f80e 	bl	8004346 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800432a:	69f8      	ldr	r0, [r7, #28]
 800432c:	f000 f89e 	bl	800446c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004330:	2301      	movs	r3, #1
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	e002      	b.n	800433c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004336:	f04f 33ff 	mov.w	r3, #4294967295
 800433a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800433c:	69bb      	ldr	r3, [r7, #24]
	}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b088      	sub	sp, #32
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
 8004352:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004356:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	461a      	mov	r2, r3
 800435e:	21a5      	movs	r1, #165	@ 0xa5
 8004360:	f001 ffac 	bl	80062bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004366:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800436e:	440b      	add	r3, r1
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	f023 0307 	bic.w	r3, r3, #7
 800437c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00d      	beq.n	80043a4 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8004388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438c:	b672      	cpsid	i
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	b662      	cpsie	i
 800439c:	617b      	str	r3, [r7, #20]
}
 800439e:	bf00      	nop
 80043a0:	bf00      	nop
 80043a2:	e7fd      	b.n	80043a0 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01f      	beq.n	80043ea <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
 80043ae:	e012      	b.n	80043d6 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	4413      	add	r3, r2
 80043b6:	7819      	ldrb	r1, [r3, #0]
 80043b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	4413      	add	r3, r2
 80043be:	3334      	adds	r3, #52	@ 0x34
 80043c0:	460a      	mov	r2, r1
 80043c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	4413      	add	r3, r2
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d006      	beq.n	80043de <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	3301      	adds	r3, #1
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	2b0f      	cmp	r3, #15
 80043da:	d9e9      	bls.n	80043b0 <prvInitialiseNewTask+0x6a>
 80043dc:	e000      	b.n	80043e0 <prvInitialiseNewTask+0x9a>
			{
				break;
 80043de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043e8:	e003      	b.n	80043f2 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f4:	2b37      	cmp	r3, #55	@ 0x37
 80043f6:	d901      	bls.n	80043fc <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043f8:	2337      	movs	r3, #55	@ 0x37
 80043fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004400:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004404:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004406:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440a:	2200      	movs	r2, #0
 800440c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800440e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004410:	3304      	adds	r3, #4
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff f93e 	bl	8003694 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441a:	3318      	adds	r3, #24
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff f939 	bl	8003694 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004426:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800442e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004430:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004436:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443a:	2200      	movs	r2, #0
 800443c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800443e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	68f9      	ldr	r1, [r7, #12]
 800444a:	69b8      	ldr	r0, [r7, #24]
 800444c:	f001 fb12 	bl	8005a74 <pxPortInitialiseStack>
 8004450:	4602      	mov	r2, r0
 8004452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004454:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800445c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800445e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004460:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004462:	bf00      	nop
 8004464:	3720      	adds	r7, #32
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004474:	f001 fc0a 	bl	8005c8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004478:	4b2d      	ldr	r3, [pc, #180]	@ (8004530 <prvAddNewTaskToReadyList+0xc4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3301      	adds	r3, #1
 800447e:	4a2c      	ldr	r2, [pc, #176]	@ (8004530 <prvAddNewTaskToReadyList+0xc4>)
 8004480:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004482:	4b2c      	ldr	r3, [pc, #176]	@ (8004534 <prvAddNewTaskToReadyList+0xc8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d109      	bne.n	800449e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800448a:	4a2a      	ldr	r2, [pc, #168]	@ (8004534 <prvAddNewTaskToReadyList+0xc8>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004490:	4b27      	ldr	r3, [pc, #156]	@ (8004530 <prvAddNewTaskToReadyList+0xc4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d110      	bne.n	80044ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004498:	f000 fdde 	bl	8005058 <prvInitialiseTaskLists>
 800449c:	e00d      	b.n	80044ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800449e:	4b26      	ldr	r3, [pc, #152]	@ (8004538 <prvAddNewTaskToReadyList+0xcc>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d109      	bne.n	80044ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044a6:	4b23      	ldr	r3, [pc, #140]	@ (8004534 <prvAddNewTaskToReadyList+0xc8>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d802      	bhi.n	80044ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004534 <prvAddNewTaskToReadyList+0xc8>)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044ba:	4b20      	ldr	r3, [pc, #128]	@ (800453c <prvAddNewTaskToReadyList+0xd0>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3301      	adds	r3, #1
 80044c0:	4a1e      	ldr	r2, [pc, #120]	@ (800453c <prvAddNewTaskToReadyList+0xd0>)
 80044c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80044c4:	4b1d      	ldr	r3, [pc, #116]	@ (800453c <prvAddNewTaskToReadyList+0xd0>)
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004540 <prvAddNewTaskToReadyList+0xd4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d903      	bls.n	80044e0 <prvAddNewTaskToReadyList+0x74>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044dc:	4a18      	ldr	r2, [pc, #96]	@ (8004540 <prvAddNewTaskToReadyList+0xd4>)
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4a15      	ldr	r2, [pc, #84]	@ (8004544 <prvAddNewTaskToReadyList+0xd8>)
 80044ee:	441a      	add	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3304      	adds	r3, #4
 80044f4:	4619      	mov	r1, r3
 80044f6:	4610      	mov	r0, r2
 80044f8:	f7ff f8d9 	bl	80036ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044fc:	f001 fbfc 	bl	8005cf8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004500:	4b0d      	ldr	r3, [pc, #52]	@ (8004538 <prvAddNewTaskToReadyList+0xcc>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00e      	beq.n	8004526 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004508:	4b0a      	ldr	r3, [pc, #40]	@ (8004534 <prvAddNewTaskToReadyList+0xc8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004512:	429a      	cmp	r2, r3
 8004514:	d207      	bcs.n	8004526 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004516:	4b0c      	ldr	r3, [pc, #48]	@ (8004548 <prvAddNewTaskToReadyList+0xdc>)
 8004518:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000c9c 	.word	0x20000c9c
 8004534:	200007c8 	.word	0x200007c8
 8004538:	20000ca8 	.word	0x20000ca8
 800453c:	20000cb8 	.word	0x20000cb8
 8004540:	20000ca4 	.word	0x20000ca4
 8004544:	200007cc 	.word	0x200007cc
 8004548:	e000ed04 	.word	0xe000ed04

0800454c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08a      	sub	sp, #40	@ 0x28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004556:	2300      	movs	r3, #0
 8004558:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10d      	bne.n	800457c <vTaskDelayUntil+0x30>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004564:	b672      	cpsid	i
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	b662      	cpsie	i
 8004574:	617b      	str	r3, [r7, #20]
}
 8004576:	bf00      	nop
 8004578:	bf00      	nop
 800457a:	e7fd      	b.n	8004578 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10d      	bne.n	800459e <vTaskDelayUntil+0x52>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004586:	b672      	cpsid	i
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	b662      	cpsie	i
 8004596:	613b      	str	r3, [r7, #16]
}
 8004598:	bf00      	nop
 800459a:	bf00      	nop
 800459c:	e7fd      	b.n	800459a <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 800459e:	4b2b      	ldr	r3, [pc, #172]	@ (800464c <vTaskDelayUntil+0x100>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00d      	beq.n	80045c2 <vTaskDelayUntil+0x76>
	__asm volatile
 80045a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045aa:	b672      	cpsid	i
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	b662      	cpsie	i
 80045ba:	60fb      	str	r3, [r7, #12]
}
 80045bc:	bf00      	nop
 80045be:	bf00      	nop
 80045c0:	e7fd      	b.n	80045be <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 80045c2:	f000 fa11 	bl	80049e8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80045c6:	4b22      	ldr	r3, [pc, #136]	@ (8004650 <vTaskDelayUntil+0x104>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	4413      	add	r3, r2
 80045d4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6a3a      	ldr	r2, [r7, #32]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d20b      	bcs.n	80045f8 <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d211      	bcs.n	800460e <vTaskDelayUntil+0xc2>
 80045ea:	69fa      	ldr	r2, [r7, #28]
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d90d      	bls.n	800460e <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 80045f2:	2301      	movs	r3, #1
 80045f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f6:	e00a      	b.n	800460e <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d303      	bcc.n	800460a <vTaskDelayUntil+0xbe>
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	429a      	cmp	r2, r3
 8004608:	d901      	bls.n	800460e <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 800460a:	2301      	movs	r3, #1
 800460c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69fa      	ldr	r2, [r7, #28]
 8004612:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004616:	2b00      	cmp	r3, #0
 8004618:	d006      	beq.n	8004628 <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2100      	movs	r1, #0
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fe6a 	bl	80052fc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004628:	f000 f9ec 	bl	8004a04 <xTaskResumeAll>
 800462c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d107      	bne.n	8004644 <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 8004634:	4b07      	ldr	r3, [pc, #28]	@ (8004654 <vTaskDelayUntil+0x108>)
 8004636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004644:	bf00      	nop
 8004646:	3728      	adds	r7, #40	@ 0x28
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20000cc4 	.word	0x20000cc4
 8004650:	20000ca0 	.word	0x20000ca0
 8004654:	e000ed04 	.word	0xe000ed04

08004658 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d01a      	beq.n	80046a0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800466a:	4b15      	ldr	r3, [pc, #84]	@ (80046c0 <vTaskDelay+0x68>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00d      	beq.n	800468e <vTaskDelay+0x36>
	__asm volatile
 8004672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004676:	b672      	cpsid	i
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	b662      	cpsie	i
 8004686:	60bb      	str	r3, [r7, #8]
}
 8004688:	bf00      	nop
 800468a:	bf00      	nop
 800468c:	e7fd      	b.n	800468a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800468e:	f000 f9ab 	bl	80049e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004692:	2100      	movs	r1, #0
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fe31 	bl	80052fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800469a:	f000 f9b3 	bl	8004a04 <xTaskResumeAll>
 800469e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d107      	bne.n	80046b6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80046a6:	4b07      	ldr	r3, [pc, #28]	@ (80046c4 <vTaskDelay+0x6c>)
 80046a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046b6:	bf00      	nop
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20000cc4 	.word	0x20000cc4
 80046c4:	e000ed04 	.word	0xe000ed04

080046c8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80046d0:	f001 fadc 	bl	8005c8c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d102      	bne.n	80046e0 <vTaskSuspend+0x18>
 80046da:	4b31      	ldr	r3, [pc, #196]	@ (80047a0 <vTaskSuspend+0xd8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	e000      	b.n	80046e2 <vTaskSuspend+0x1a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3304      	adds	r3, #4
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff f83d 	bl	8003768 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d004      	beq.n	8004700 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3318      	adds	r3, #24
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff f834 	bl	8003768 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3304      	adds	r3, #4
 8004704:	4619      	mov	r1, r3
 8004706:	4827      	ldr	r0, [pc, #156]	@ (80047a4 <vTaskSuspend+0xdc>)
 8004708:	f7fe ffd1 	bl	80036ae <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b01      	cmp	r3, #1
 8004716:	d103      	bne.n	8004720 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8004720:	f001 faea 	bl	8005cf8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8004724:	4b20      	ldr	r3, [pc, #128]	@ (80047a8 <vTaskSuspend+0xe0>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800472c:	f001 faae 	bl	8005c8c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8004730:	f000 fd32 	bl	8005198 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8004734:	f001 fae0 	bl	8005cf8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004738:	4b19      	ldr	r3, [pc, #100]	@ (80047a0 <vTaskSuspend+0xd8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	429a      	cmp	r2, r3
 8004740:	d12a      	bne.n	8004798 <vTaskSuspend+0xd0>
		{
			if( xSchedulerRunning != pdFALSE )
 8004742:	4b19      	ldr	r3, [pc, #100]	@ (80047a8 <vTaskSuspend+0xe0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d01a      	beq.n	8004780 <vTaskSuspend+0xb8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800474a:	4b18      	ldr	r3, [pc, #96]	@ (80047ac <vTaskSuspend+0xe4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00d      	beq.n	800476e <vTaskSuspend+0xa6>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004756:	b672      	cpsid	i
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	b662      	cpsie	i
 8004766:	60bb      	str	r3, [r7, #8]
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	e7fd      	b.n	800476a <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 800476e:	4b10      	ldr	r3, [pc, #64]	@ (80047b0 <vTaskSuspend+0xe8>)
 8004770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800477e:	e00b      	b.n	8004798 <vTaskSuspend+0xd0>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004780:	4b08      	ldr	r3, [pc, #32]	@ (80047a4 <vTaskSuspend+0xdc>)
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4b0b      	ldr	r3, [pc, #44]	@ (80047b4 <vTaskSuspend+0xec>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d103      	bne.n	8004794 <vTaskSuspend+0xcc>
					pxCurrentTCB = NULL;
 800478c:	4b04      	ldr	r3, [pc, #16]	@ (80047a0 <vTaskSuspend+0xd8>)
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
	}
 8004792:	e001      	b.n	8004798 <vTaskSuspend+0xd0>
					vTaskSwitchContext();
 8004794:	f000 faa2 	bl	8004cdc <vTaskSwitchContext>
	}
 8004798:	bf00      	nop
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	200007c8 	.word	0x200007c8
 80047a4:	20000c88 	.word	0x20000c88
 80047a8:	20000ca8 	.word	0x20000ca8
 80047ac:	20000cc4 	.word	0x20000cc4
 80047b0:	e000ed04 	.word	0xe000ed04
 80047b4:	20000c9c 	.word	0x20000c9c

080047b8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80047c0:	2300      	movs	r3, #0
 80047c2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10d      	bne.n	80047ea <prvTaskIsTaskSuspended+0x32>
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d2:	b672      	cpsid	i
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	b662      	cpsie	i
 80047e2:	60fb      	str	r3, [r7, #12]
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop
 80047e8:	e7fd      	b.n	80047e6 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004818 <prvTaskIsTaskSuspended+0x60>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d10a      	bne.n	800480a <prvTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f8:	4a08      	ldr	r2, [pc, #32]	@ (800481c <prvTaskIsTaskSuspended+0x64>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d005      	beq.n	800480a <prvTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <prvTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
 8004806:	2301      	movs	r3, #1
 8004808:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800480a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800480c:	4618      	mov	r0, r3
 800480e:	371c      	adds	r7, #28
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	20000c88 	.word	0x20000c88
 800481c:	20000c5c 	.word	0x20000c5c

08004820 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08a      	sub	sp, #40	@ 0x28
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8004828:	2300      	movs	r3, #0
 800482a:	627b      	str	r3, [r7, #36]	@ 0x24
	TCB_t * const pxTCB = xTaskToResume;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10d      	bne.n	8004852 <xTaskResumeFromISR+0x32>
	__asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800483a:	b672      	cpsid	i
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	b662      	cpsie	i
 800484a:	61bb      	str	r3, [r7, #24]
}
 800484c:	bf00      	nop
 800484e:	bf00      	nop
 8004850:	e7fd      	b.n	800484e <xTaskResumeFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004852:	f001 fb03 	bl	8005e5c <vPortValidateInterruptPriority>
	__asm volatile
 8004856:	f3ef 8211 	mrs	r2, BASEPRI
 800485a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800485e:	b672      	cpsid	i
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	b662      	cpsie	i
 800486e:	617a      	str	r2, [r7, #20]
 8004870:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004872:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004874:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8004876:	6a38      	ldr	r0, [r7, #32]
 8004878:	f7ff ff9e 	bl	80047b8 <prvTaskIsTaskSuspended>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d030      	beq.n	80048e4 <xTaskResumeFromISR+0xc4>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004882:	4b1e      	ldr	r3, [pc, #120]	@ (80048fc <xTaskResumeFromISR+0xdc>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d126      	bne.n	80048d8 <xTaskResumeFromISR+0xb8>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488e:	4b1c      	ldr	r3, [pc, #112]	@ (8004900 <xTaskResumeFromISR+0xe0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004894:	429a      	cmp	r2, r3
 8004896:	d301      	bcc.n	800489c <xTaskResumeFromISR+0x7c>
					{
						xYieldRequired = pdTRUE;
 8004898:	2301      	movs	r3, #1
 800489a:	627b      	str	r3, [r7, #36]	@ 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	3304      	adds	r3, #4
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fe ff61 	bl	8003768 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048aa:	4b16      	ldr	r3, [pc, #88]	@ (8004904 <xTaskResumeFromISR+0xe4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d903      	bls.n	80048ba <xTaskResumeFromISR+0x9a>
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b6:	4a13      	ldr	r2, [pc, #76]	@ (8004904 <xTaskResumeFromISR+0xe4>)
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4a10      	ldr	r2, [pc, #64]	@ (8004908 <xTaskResumeFromISR+0xe8>)
 80048c8:	441a      	add	r2, r3
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	3304      	adds	r3, #4
 80048ce:	4619      	mov	r1, r3
 80048d0:	4610      	mov	r0, r2
 80048d2:	f7fe feec 	bl	80036ae <vListInsertEnd>
 80048d6:	e005      	b.n	80048e4 <xTaskResumeFromISR+0xc4>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	3318      	adds	r3, #24
 80048dc:	4619      	mov	r1, r3
 80048de:	480b      	ldr	r0, [pc, #44]	@ (800490c <xTaskResumeFromISR+0xec>)
 80048e0:	f7fe fee5 	bl	80036ae <vListInsertEnd>
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f383 8811 	msr	BASEPRI, r3
}
 80048ee:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80048f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3728      	adds	r7, #40	@ 0x28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20000cc4 	.word	0x20000cc4
 8004900:	200007c8 	.word	0x200007c8
 8004904:	20000ca4 	.word	0x20000ca4
 8004908:	200007cc 	.word	0x200007cc
 800490c:	20000c5c 	.word	0x20000c5c

08004910 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08a      	sub	sp, #40	@ 0x28
 8004914:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800491a:	2300      	movs	r3, #0
 800491c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800491e:	463a      	mov	r2, r7
 8004920:	1d39      	adds	r1, r7, #4
 8004922:	f107 0308 	add.w	r3, r7, #8
 8004926:	4618      	mov	r0, r3
 8004928:	f7fe fe60 	bl	80035ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800492c:	6839      	ldr	r1, [r7, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	9202      	str	r2, [sp, #8]
 8004934:	9301      	str	r3, [sp, #4]
 8004936:	2300      	movs	r3, #0
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	2300      	movs	r3, #0
 800493c:	460a      	mov	r2, r1
 800493e:	4924      	ldr	r1, [pc, #144]	@ (80049d0 <vTaskStartScheduler+0xc0>)
 8004940:	4824      	ldr	r0, [pc, #144]	@ (80049d4 <vTaskStartScheduler+0xc4>)
 8004942:	f7ff fc55 	bl	80041f0 <xTaskCreateStatic>
 8004946:	4603      	mov	r3, r0
 8004948:	4a23      	ldr	r2, [pc, #140]	@ (80049d8 <vTaskStartScheduler+0xc8>)
 800494a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800494c:	4b22      	ldr	r3, [pc, #136]	@ (80049d8 <vTaskStartScheduler+0xc8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004954:	2301      	movs	r3, #1
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	e001      	b.n	800495e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800495a:	2300      	movs	r3, #0
 800495c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d102      	bne.n	800496a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004964:	f000 fd1e 	bl	80053a4 <xTimerCreateTimerTask>
 8004968:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d118      	bne.n	80049a2 <vTaskStartScheduler+0x92>
	__asm volatile
 8004970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004974:	b672      	cpsid	i
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	b662      	cpsie	i
 8004984:	613b      	str	r3, [r7, #16]
}
 8004986:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004988:	4b14      	ldr	r3, [pc, #80]	@ (80049dc <vTaskStartScheduler+0xcc>)
 800498a:	f04f 32ff 	mov.w	r2, #4294967295
 800498e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004990:	4b13      	ldr	r3, [pc, #76]	@ (80049e0 <vTaskStartScheduler+0xd0>)
 8004992:	2201      	movs	r2, #1
 8004994:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004996:	4b13      	ldr	r3, [pc, #76]	@ (80049e4 <vTaskStartScheduler+0xd4>)
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800499c:	f001 f8f8 	bl	8005b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049a0:	e011      	b.n	80049c6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a8:	d10d      	bne.n	80049c6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ae:	b672      	cpsid	i
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	b662      	cpsie	i
 80049be:	60fb      	str	r3, [r7, #12]
}
 80049c0:	bf00      	nop
 80049c2:	bf00      	nop
 80049c4:	e7fd      	b.n	80049c2 <vTaskStartScheduler+0xb2>
}
 80049c6:	bf00      	nop
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	08006354 	.word	0x08006354
 80049d4:	08005029 	.word	0x08005029
 80049d8:	20000cc0 	.word	0x20000cc0
 80049dc:	20000cbc 	.word	0x20000cbc
 80049e0:	20000ca8 	.word	0x20000ca8
 80049e4:	20000ca0 	.word	0x20000ca0

080049e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80049ec:	4b04      	ldr	r3, [pc, #16]	@ (8004a00 <vTaskSuspendAll+0x18>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3301      	adds	r3, #1
 80049f2:	4a03      	ldr	r2, [pc, #12]	@ (8004a00 <vTaskSuspendAll+0x18>)
 80049f4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80049f6:	bf00      	nop
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	20000cc4 	.word	0x20000cc4

08004a04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a12:	4b43      	ldr	r3, [pc, #268]	@ (8004b20 <xTaskResumeAll+0x11c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10d      	bne.n	8004a36 <xTaskResumeAll+0x32>
	__asm volatile
 8004a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1e:	b672      	cpsid	i
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	b662      	cpsie	i
 8004a2e:	603b      	str	r3, [r7, #0]
}
 8004a30:	bf00      	nop
 8004a32:	bf00      	nop
 8004a34:	e7fd      	b.n	8004a32 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a36:	f001 f929 	bl	8005c8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a3a:	4b39      	ldr	r3, [pc, #228]	@ (8004b20 <xTaskResumeAll+0x11c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	4a37      	ldr	r2, [pc, #220]	@ (8004b20 <xTaskResumeAll+0x11c>)
 8004a42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a44:	4b36      	ldr	r3, [pc, #216]	@ (8004b20 <xTaskResumeAll+0x11c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d162      	bne.n	8004b12 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a4c:	4b35      	ldr	r3, [pc, #212]	@ (8004b24 <xTaskResumeAll+0x120>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d05e      	beq.n	8004b12 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a54:	e02f      	b.n	8004ab6 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a56:	4b34      	ldr	r3, [pc, #208]	@ (8004b28 <xTaskResumeAll+0x124>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3318      	adds	r3, #24
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fe fe80 	bl	8003768 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fe fe7b 	bl	8003768 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a76:	4b2d      	ldr	r3, [pc, #180]	@ (8004b2c <xTaskResumeAll+0x128>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d903      	bls.n	8004a86 <xTaskResumeAll+0x82>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a82:	4a2a      	ldr	r2, [pc, #168]	@ (8004b2c <xTaskResumeAll+0x128>)
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4a27      	ldr	r2, [pc, #156]	@ (8004b30 <xTaskResumeAll+0x12c>)
 8004a94:	441a      	add	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f7fe fe06 	bl	80036ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa6:	4b23      	ldr	r3, [pc, #140]	@ (8004b34 <xTaskResumeAll+0x130>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d302      	bcc.n	8004ab6 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8004ab0:	4b21      	ldr	r3, [pc, #132]	@ (8004b38 <xTaskResumeAll+0x134>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8004b28 <xTaskResumeAll+0x124>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1cb      	bne.n	8004a56 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ac4:	f000 fb68 	bl	8005198 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8004b3c <xTaskResumeAll+0x138>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d010      	beq.n	8004af6 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ad4:	f000 f846 	bl	8004b64 <xTaskIncrementTick>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8004ade:	4b16      	ldr	r3, [pc, #88]	@ (8004b38 <xTaskResumeAll+0x134>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1f1      	bne.n	8004ad4 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8004af0:	4b12      	ldr	r3, [pc, #72]	@ (8004b3c <xTaskResumeAll+0x138>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004af6:	4b10      	ldr	r3, [pc, #64]	@ (8004b38 <xTaskResumeAll+0x134>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d009      	beq.n	8004b12 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004afe:	2301      	movs	r3, #1
 8004b00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b02:	4b0f      	ldr	r3, [pc, #60]	@ (8004b40 <xTaskResumeAll+0x13c>)
 8004b04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b12:	f001 f8f1 	bl	8005cf8 <vPortExitCritical>

	return xAlreadyYielded;
 8004b16:	68bb      	ldr	r3, [r7, #8]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	20000cc4 	.word	0x20000cc4
 8004b24:	20000c9c 	.word	0x20000c9c
 8004b28:	20000c5c 	.word	0x20000c5c
 8004b2c:	20000ca4 	.word	0x20000ca4
 8004b30:	200007cc 	.word	0x200007cc
 8004b34:	200007c8 	.word	0x200007c8
 8004b38:	20000cb0 	.word	0x20000cb0
 8004b3c:	20000cac 	.word	0x20000cac
 8004b40:	e000ed04 	.word	0xe000ed04

08004b44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b4a:	4b05      	ldr	r3, [pc, #20]	@ (8004b60 <xTaskGetTickCount+0x1c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b50:	687b      	ldr	r3, [r7, #4]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	20000ca0 	.word	0x20000ca0

08004b64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b6e:	4b50      	ldr	r3, [pc, #320]	@ (8004cb0 <xTaskIncrementTick+0x14c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f040 808c 	bne.w	8004c90 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b78:	4b4e      	ldr	r3, [pc, #312]	@ (8004cb4 <xTaskIncrementTick+0x150>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b80:	4a4c      	ldr	r2, [pc, #304]	@ (8004cb4 <xTaskIncrementTick+0x150>)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d123      	bne.n	8004bd4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b8c:	4b4a      	ldr	r3, [pc, #296]	@ (8004cb8 <xTaskIncrementTick+0x154>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00d      	beq.n	8004bb2 <xTaskIncrementTick+0x4e>
	__asm volatile
 8004b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9a:	b672      	cpsid	i
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	b662      	cpsie	i
 8004baa:	603b      	str	r3, [r7, #0]
}
 8004bac:	bf00      	nop
 8004bae:	bf00      	nop
 8004bb0:	e7fd      	b.n	8004bae <xTaskIncrementTick+0x4a>
 8004bb2:	4b41      	ldr	r3, [pc, #260]	@ (8004cb8 <xTaskIncrementTick+0x154>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	4b40      	ldr	r3, [pc, #256]	@ (8004cbc <xTaskIncrementTick+0x158>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a3e      	ldr	r2, [pc, #248]	@ (8004cb8 <xTaskIncrementTick+0x154>)
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	4a3e      	ldr	r2, [pc, #248]	@ (8004cbc <xTaskIncrementTick+0x158>)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8004cc0 <xTaskIncrementTick+0x15c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	4a3c      	ldr	r2, [pc, #240]	@ (8004cc0 <xTaskIncrementTick+0x15c>)
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	f000 fae2 	bl	8005198 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc4 <xTaskIncrementTick+0x160>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d349      	bcc.n	8004c72 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bde:	4b36      	ldr	r3, [pc, #216]	@ (8004cb8 <xTaskIncrementTick+0x154>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d104      	bne.n	8004bf2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be8:	4b36      	ldr	r3, [pc, #216]	@ (8004cc4 <xTaskIncrementTick+0x160>)
 8004bea:	f04f 32ff 	mov.w	r2, #4294967295
 8004bee:	601a      	str	r2, [r3, #0]
					break;
 8004bf0:	e03f      	b.n	8004c72 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bf2:	4b31      	ldr	r3, [pc, #196]	@ (8004cb8 <xTaskIncrementTick+0x154>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d203      	bcs.n	8004c12 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c0a:	4a2e      	ldr	r2, [pc, #184]	@ (8004cc4 <xTaskIncrementTick+0x160>)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c10:	e02f      	b.n	8004c72 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	3304      	adds	r3, #4
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fe fda6 	bl	8003768 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d004      	beq.n	8004c2e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	3318      	adds	r3, #24
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fe fd9d 	bl	8003768 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c32:	4b25      	ldr	r3, [pc, #148]	@ (8004cc8 <xTaskIncrementTick+0x164>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d903      	bls.n	8004c42 <xTaskIncrementTick+0xde>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3e:	4a22      	ldr	r2, [pc, #136]	@ (8004cc8 <xTaskIncrementTick+0x164>)
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c46:	4613      	mov	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004ccc <xTaskIncrementTick+0x168>)
 8004c50:	441a      	add	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	3304      	adds	r3, #4
 8004c56:	4619      	mov	r1, r3
 8004c58:	4610      	mov	r0, r2
 8004c5a:	f7fe fd28 	bl	80036ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c62:	4b1b      	ldr	r3, [pc, #108]	@ (8004cd0 <xTaskIncrementTick+0x16c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d3b8      	bcc.n	8004bde <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c70:	e7b5      	b.n	8004bde <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c72:	4b17      	ldr	r3, [pc, #92]	@ (8004cd0 <xTaskIncrementTick+0x16c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c78:	4914      	ldr	r1, [pc, #80]	@ (8004ccc <xTaskIncrementTick+0x168>)
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	440b      	add	r3, r1
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d907      	bls.n	8004c9a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	e004      	b.n	8004c9a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004c90:	4b10      	ldr	r3, [pc, #64]	@ (8004cd4 <xTaskIncrementTick+0x170>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3301      	adds	r3, #1
 8004c96:	4a0f      	ldr	r2, [pc, #60]	@ (8004cd4 <xTaskIncrementTick+0x170>)
 8004c98:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd8 <xTaskIncrementTick+0x174>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004ca6:	697b      	ldr	r3, [r7, #20]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	20000cc4 	.word	0x20000cc4
 8004cb4:	20000ca0 	.word	0x20000ca0
 8004cb8:	20000c54 	.word	0x20000c54
 8004cbc:	20000c58 	.word	0x20000c58
 8004cc0:	20000cb4 	.word	0x20000cb4
 8004cc4:	20000cbc 	.word	0x20000cbc
 8004cc8:	20000ca4 	.word	0x20000ca4
 8004ccc:	200007cc 	.word	0x200007cc
 8004cd0:	200007c8 	.word	0x200007c8
 8004cd4:	20000cac 	.word	0x20000cac
 8004cd8:	20000cb0 	.word	0x20000cb0

08004cdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ce2:	4b29      	ldr	r3, [pc, #164]	@ (8004d88 <vTaskSwitchContext+0xac>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004cea:	4b28      	ldr	r3, [pc, #160]	@ (8004d8c <vTaskSwitchContext+0xb0>)
 8004cec:	2201      	movs	r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004cf0:	e044      	b.n	8004d7c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004cf2:	4b26      	ldr	r3, [pc, #152]	@ (8004d8c <vTaskSwitchContext+0xb0>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf8:	4b25      	ldr	r3, [pc, #148]	@ (8004d90 <vTaskSwitchContext+0xb4>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	e013      	b.n	8004d28 <vTaskSwitchContext+0x4c>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10d      	bne.n	8004d22 <vTaskSwitchContext+0x46>
	__asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0a:	b672      	cpsid	i
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	b662      	cpsie	i
 8004d1a:	607b      	str	r3, [r7, #4]
}
 8004d1c:	bf00      	nop
 8004d1e:	bf00      	nop
 8004d20:	e7fd      	b.n	8004d1e <vTaskSwitchContext+0x42>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	491a      	ldr	r1, [pc, #104]	@ (8004d94 <vTaskSwitchContext+0xb8>)
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0e1      	beq.n	8004d00 <vTaskSwitchContext+0x24>
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4a13      	ldr	r2, [pc, #76]	@ (8004d94 <vTaskSwitchContext+0xb8>)
 8004d48:	4413      	add	r3, r2
 8004d4a:	60bb      	str	r3, [r7, #8]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	605a      	str	r2, [r3, #4]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d104      	bne.n	8004d6c <vTaskSwitchContext+0x90>
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	605a      	str	r2, [r3, #4]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	4a09      	ldr	r2, [pc, #36]	@ (8004d98 <vTaskSwitchContext+0xbc>)
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	4a06      	ldr	r2, [pc, #24]	@ (8004d90 <vTaskSwitchContext+0xb4>)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6013      	str	r3, [r2, #0]
}
 8004d7c:	bf00      	nop
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	20000cc4 	.word	0x20000cc4
 8004d8c:	20000cb0 	.word	0x20000cb0
 8004d90:	20000ca4 	.word	0x20000ca4
 8004d94:	200007cc 	.word	0x200007cc
 8004d98:	200007c8 	.word	0x200007c8

08004d9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10d      	bne.n	8004dc8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db0:	b672      	cpsid	i
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	b662      	cpsie	i
 8004dc0:	60fb      	str	r3, [r7, #12]
}
 8004dc2:	bf00      	nop
 8004dc4:	bf00      	nop
 8004dc6:	e7fd      	b.n	8004dc4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004dc8:	4b07      	ldr	r3, [pc, #28]	@ (8004de8 <vTaskPlaceOnEventList+0x4c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3318      	adds	r3, #24
 8004dce:	4619      	mov	r1, r3
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7fe fc90 	bl	80036f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	6838      	ldr	r0, [r7, #0]
 8004dda:	f000 fa8f 	bl	80052fc <prvAddCurrentTaskToDelayedList>
}
 8004dde:	bf00      	nop
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	200007c8 	.word	0x200007c8

08004dec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10d      	bne.n	8004e1a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e02:	b672      	cpsid	i
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	b662      	cpsie	i
 8004e12:	617b      	str	r3, [r7, #20]
}
 8004e14:	bf00      	nop
 8004e16:	bf00      	nop
 8004e18:	e7fd      	b.n	8004e16 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e44 <vTaskPlaceOnEventListRestricted+0x58>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3318      	adds	r3, #24
 8004e20:	4619      	mov	r1, r3
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f7fe fc43 	bl	80036ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8004e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e32:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	68b8      	ldr	r0, [r7, #8]
 8004e38:	f000 fa60 	bl	80052fc <prvAddCurrentTaskToDelayedList>
	}
 8004e3c:	bf00      	nop
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	200007c8 	.word	0x200007c8

08004e48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10d      	bne.n	8004e7a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e62:	b672      	cpsid	i
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	b662      	cpsie	i
 8004e72:	60fb      	str	r3, [r7, #12]
}
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop
 8004e78:	e7fd      	b.n	8004e76 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	3318      	adds	r3, #24
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fe fc72 	bl	8003768 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e84:	4b1d      	ldr	r3, [pc, #116]	@ (8004efc <xTaskRemoveFromEventList+0xb4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d11d      	bne.n	8004ec8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fe fc69 	bl	8003768 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e9a:	4b19      	ldr	r3, [pc, #100]	@ (8004f00 <xTaskRemoveFromEventList+0xb8>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d903      	bls.n	8004eaa <xTaskRemoveFromEventList+0x62>
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea6:	4a16      	ldr	r2, [pc, #88]	@ (8004f00 <xTaskRemoveFromEventList+0xb8>)
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4a13      	ldr	r2, [pc, #76]	@ (8004f04 <xTaskRemoveFromEventList+0xbc>)
 8004eb8:	441a      	add	r2, r3
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	f7fe fbf4 	bl	80036ae <vListInsertEnd>
 8004ec6:	e005      	b.n	8004ed4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	3318      	adds	r3, #24
 8004ecc:	4619      	mov	r1, r3
 8004ece:	480e      	ldr	r0, [pc, #56]	@ (8004f08 <xTaskRemoveFromEventList+0xc0>)
 8004ed0:	f7fe fbed 	bl	80036ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f0c <xTaskRemoveFromEventList+0xc4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d905      	bls.n	8004eee <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f10 <xTaskRemoveFromEventList+0xc8>)
 8004ee8:	2201      	movs	r2, #1
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	e001      	b.n	8004ef2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ef2:	697b      	ldr	r3, [r7, #20]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20000cc4 	.word	0x20000cc4
 8004f00:	20000ca4 	.word	0x20000ca4
 8004f04:	200007cc 	.word	0x200007cc
 8004f08:	20000c5c 	.word	0x20000c5c
 8004f0c:	200007c8 	.word	0x200007c8
 8004f10:	20000cb0 	.word	0x20000cb0

08004f14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f1c:	4b06      	ldr	r3, [pc, #24]	@ (8004f38 <vTaskInternalSetTimeOutState+0x24>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f24:	4b05      	ldr	r3, [pc, #20]	@ (8004f3c <vTaskInternalSetTimeOutState+0x28>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	605a      	str	r2, [r3, #4]
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	20000cb4 	.word	0x20000cb4
 8004f3c:	20000ca0 	.word	0x20000ca0

08004f40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10d      	bne.n	8004f6c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f54:	b672      	cpsid	i
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	b662      	cpsie	i
 8004f64:	613b      	str	r3, [r7, #16]
}
 8004f66:	bf00      	nop
 8004f68:	bf00      	nop
 8004f6a:	e7fd      	b.n	8004f68 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10d      	bne.n	8004f8e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f76:	b672      	cpsid	i
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	b662      	cpsie	i
 8004f86:	60fb      	str	r3, [r7, #12]
}
 8004f88:	bf00      	nop
 8004f8a:	bf00      	nop
 8004f8c:	e7fd      	b.n	8004f8a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8004f8e:	f000 fe7d 	bl	8005c8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f92:	4b1d      	ldr	r3, [pc, #116]	@ (8005008 <xTaskCheckForTimeOut+0xc8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004faa:	d102      	bne.n	8004fb2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fac:	2300      	movs	r3, #0
 8004fae:	61fb      	str	r3, [r7, #28]
 8004fb0:	e023      	b.n	8004ffa <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4b15      	ldr	r3, [pc, #84]	@ (800500c <xTaskCheckForTimeOut+0xcc>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d007      	beq.n	8004fce <xTaskCheckForTimeOut+0x8e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d302      	bcc.n	8004fce <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	e015      	b.n	8004ffa <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d20b      	bcs.n	8004ff0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	1ad2      	subs	r2, r2, r3
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7ff ff95 	bl	8004f14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004fea:	2300      	movs	r3, #0
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	e004      	b.n	8004ffa <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ffa:	f000 fe7d 	bl	8005cf8 <vPortExitCritical>

	return xReturn;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3720      	adds	r7, #32
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20000ca0 	.word	0x20000ca0
 800500c:	20000cb4 	.word	0x20000cb4

08005010 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005014:	4b03      	ldr	r3, [pc, #12]	@ (8005024 <vTaskMissedYield+0x14>)
 8005016:	2201      	movs	r2, #1
 8005018:	601a      	str	r2, [r3, #0]
}
 800501a:	bf00      	nop
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	20000cb0 	.word	0x20000cb0

08005028 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005030:	f000 f852 	bl	80050d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005034:	4b06      	ldr	r3, [pc, #24]	@ (8005050 <prvIdleTask+0x28>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d9f9      	bls.n	8005030 <prvIdleTask+0x8>
			{
				taskYIELD();
 800503c:	4b05      	ldr	r3, [pc, #20]	@ (8005054 <prvIdleTask+0x2c>)
 800503e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800504c:	e7f0      	b.n	8005030 <prvIdleTask+0x8>
 800504e:	bf00      	nop
 8005050:	200007cc 	.word	0x200007cc
 8005054:	e000ed04 	.word	0xe000ed04

08005058 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800505e:	2300      	movs	r3, #0
 8005060:	607b      	str	r3, [r7, #4]
 8005062:	e00c      	b.n	800507e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	4613      	mov	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4a12      	ldr	r2, [pc, #72]	@ (80050b8 <prvInitialiseTaskLists+0x60>)
 8005070:	4413      	add	r3, r2
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe faee 	bl	8003654 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3301      	adds	r3, #1
 800507c:	607b      	str	r3, [r7, #4]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b37      	cmp	r3, #55	@ 0x37
 8005082:	d9ef      	bls.n	8005064 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005084:	480d      	ldr	r0, [pc, #52]	@ (80050bc <prvInitialiseTaskLists+0x64>)
 8005086:	f7fe fae5 	bl	8003654 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800508a:	480d      	ldr	r0, [pc, #52]	@ (80050c0 <prvInitialiseTaskLists+0x68>)
 800508c:	f7fe fae2 	bl	8003654 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005090:	480c      	ldr	r0, [pc, #48]	@ (80050c4 <prvInitialiseTaskLists+0x6c>)
 8005092:	f7fe fadf 	bl	8003654 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005096:	480c      	ldr	r0, [pc, #48]	@ (80050c8 <prvInitialiseTaskLists+0x70>)
 8005098:	f7fe fadc 	bl	8003654 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800509c:	480b      	ldr	r0, [pc, #44]	@ (80050cc <prvInitialiseTaskLists+0x74>)
 800509e:	f7fe fad9 	bl	8003654 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050a2:	4b0b      	ldr	r3, [pc, #44]	@ (80050d0 <prvInitialiseTaskLists+0x78>)
 80050a4:	4a05      	ldr	r2, [pc, #20]	@ (80050bc <prvInitialiseTaskLists+0x64>)
 80050a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050a8:	4b0a      	ldr	r3, [pc, #40]	@ (80050d4 <prvInitialiseTaskLists+0x7c>)
 80050aa:	4a05      	ldr	r2, [pc, #20]	@ (80050c0 <prvInitialiseTaskLists+0x68>)
 80050ac:	601a      	str	r2, [r3, #0]
}
 80050ae:	bf00      	nop
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	200007cc 	.word	0x200007cc
 80050bc:	20000c2c 	.word	0x20000c2c
 80050c0:	20000c40 	.word	0x20000c40
 80050c4:	20000c5c 	.word	0x20000c5c
 80050c8:	20000c70 	.word	0x20000c70
 80050cc:	20000c88 	.word	0x20000c88
 80050d0:	20000c54 	.word	0x20000c54
 80050d4:	20000c58 	.word	0x20000c58

080050d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050de:	e019      	b.n	8005114 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050e0:	f000 fdd4 	bl	8005c8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e4:	4b10      	ldr	r3, [pc, #64]	@ (8005128 <prvCheckTasksWaitingTermination+0x50>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3304      	adds	r3, #4
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fe fb39 	bl	8003768 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050f6:	4b0d      	ldr	r3, [pc, #52]	@ (800512c <prvCheckTasksWaitingTermination+0x54>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	4a0b      	ldr	r2, [pc, #44]	@ (800512c <prvCheckTasksWaitingTermination+0x54>)
 80050fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005100:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <prvCheckTasksWaitingTermination+0x58>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3b01      	subs	r3, #1
 8005106:	4a0a      	ldr	r2, [pc, #40]	@ (8005130 <prvCheckTasksWaitingTermination+0x58>)
 8005108:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800510a:	f000 fdf5 	bl	8005cf8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f810 	bl	8005134 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005114:	4b06      	ldr	r3, [pc, #24]	@ (8005130 <prvCheckTasksWaitingTermination+0x58>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e1      	bne.n	80050e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800511c:	bf00      	nop
 800511e:	bf00      	nop
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20000c70 	.word	0x20000c70
 800512c:	20000c9c 	.word	0x20000c9c
 8005130:	20000c84 	.word	0x20000c84

08005134 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005142:	2b00      	cmp	r3, #0
 8005144:	d108      	bne.n	8005158 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514a:	4618      	mov	r0, r3
 800514c:	f000 ff9a 	bl	8006084 <vPortFree>
				vPortFree( pxTCB );
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 ff97 	bl	8006084 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005156:	e01b      	b.n	8005190 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800515e:	2b01      	cmp	r3, #1
 8005160:	d103      	bne.n	800516a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 ff8e 	bl	8006084 <vPortFree>
	}
 8005168:	e012      	b.n	8005190 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005170:	2b02      	cmp	r3, #2
 8005172:	d00d      	beq.n	8005190 <prvDeleteTCB+0x5c>
	__asm volatile
 8005174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005178:	b672      	cpsid	i
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	b662      	cpsie	i
 8005188:	60fb      	str	r3, [r7, #12]
}
 800518a:	bf00      	nop
 800518c:	bf00      	nop
 800518e:	e7fd      	b.n	800518c <prvDeleteTCB+0x58>
	}
 8005190:	bf00      	nop
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800519e:	4b0c      	ldr	r3, [pc, #48]	@ (80051d0 <prvResetNextTaskUnblockTime+0x38>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d104      	bne.n	80051b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051a8:	4b0a      	ldr	r3, [pc, #40]	@ (80051d4 <prvResetNextTaskUnblockTime+0x3c>)
 80051aa:	f04f 32ff 	mov.w	r2, #4294967295
 80051ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051b0:	e008      	b.n	80051c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051b2:	4b07      	ldr	r3, [pc, #28]	@ (80051d0 <prvResetNextTaskUnblockTime+0x38>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	4a04      	ldr	r2, [pc, #16]	@ (80051d4 <prvResetNextTaskUnblockTime+0x3c>)
 80051c2:	6013      	str	r3, [r2, #0]
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	20000c54 	.word	0x20000c54
 80051d4:	20000cbc 	.word	0x20000cbc

080051d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051de:	4b0b      	ldr	r3, [pc, #44]	@ (800520c <xTaskGetSchedulerState+0x34>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d102      	bne.n	80051ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051e6:	2301      	movs	r3, #1
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	e008      	b.n	80051fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051ec:	4b08      	ldr	r3, [pc, #32]	@ (8005210 <xTaskGetSchedulerState+0x38>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d102      	bne.n	80051fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051f4:	2302      	movs	r3, #2
 80051f6:	607b      	str	r3, [r7, #4]
 80051f8:	e001      	b.n	80051fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80051fa:	2300      	movs	r3, #0
 80051fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80051fe:	687b      	ldr	r3, [r7, #4]
	}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	20000ca8 	.word	0x20000ca8
 8005210:	20000cc4 	.word	0x20000cc4

08005214 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005220:	2300      	movs	r3, #0
 8005222:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d05c      	beq.n	80052e4 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800522a:	4b31      	ldr	r3, [pc, #196]	@ (80052f0 <xTaskPriorityDisinherit+0xdc>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	429a      	cmp	r2, r3
 8005232:	d00d      	beq.n	8005250 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005238:	b672      	cpsid	i
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	b662      	cpsie	i
 8005248:	60fb      	str	r3, [r7, #12]
}
 800524a:	bf00      	nop
 800524c:	bf00      	nop
 800524e:	e7fd      	b.n	800524c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10d      	bne.n	8005274 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525c:	b672      	cpsid	i
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	b662      	cpsie	i
 800526c:	60bb      	str	r3, [r7, #8]
}
 800526e:	bf00      	nop
 8005270:	bf00      	nop
 8005272:	e7fd      	b.n	8005270 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005278:	1e5a      	subs	r2, r3, #1
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005286:	429a      	cmp	r2, r3
 8005288:	d02c      	beq.n	80052e4 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800528e:	2b00      	cmp	r3, #0
 8005290:	d128      	bne.n	80052e4 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	3304      	adds	r3, #4
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe fa66 	bl	8003768 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052b4:	4b0f      	ldr	r3, [pc, #60]	@ (80052f4 <xTaskPriorityDisinherit+0xe0>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d903      	bls.n	80052c4 <xTaskPriorityDisinherit+0xb0>
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c0:	4a0c      	ldr	r2, [pc, #48]	@ (80052f4 <xTaskPriorityDisinherit+0xe0>)
 80052c2:	6013      	str	r3, [r2, #0]
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c8:	4613      	mov	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4a09      	ldr	r2, [pc, #36]	@ (80052f8 <xTaskPriorityDisinherit+0xe4>)
 80052d2:	441a      	add	r2, r3
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	3304      	adds	r3, #4
 80052d8:	4619      	mov	r1, r3
 80052da:	4610      	mov	r0, r2
 80052dc:	f7fe f9e7 	bl	80036ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052e0:	2301      	movs	r3, #1
 80052e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052e4:	697b      	ldr	r3, [r7, #20]
	}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	200007c8 	.word	0x200007c8
 80052f4:	20000ca4 	.word	0x20000ca4
 80052f8:	200007cc 	.word	0x200007cc

080052fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005306:	4b21      	ldr	r3, [pc, #132]	@ (800538c <prvAddCurrentTaskToDelayedList+0x90>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800530c:	4b20      	ldr	r3, [pc, #128]	@ (8005390 <prvAddCurrentTaskToDelayedList+0x94>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3304      	adds	r3, #4
 8005312:	4618      	mov	r0, r3
 8005314:	f7fe fa28 	bl	8003768 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531e:	d10a      	bne.n	8005336 <prvAddCurrentTaskToDelayedList+0x3a>
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d007      	beq.n	8005336 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005326:	4b1a      	ldr	r3, [pc, #104]	@ (8005390 <prvAddCurrentTaskToDelayedList+0x94>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3304      	adds	r3, #4
 800532c:	4619      	mov	r1, r3
 800532e:	4819      	ldr	r0, [pc, #100]	@ (8005394 <prvAddCurrentTaskToDelayedList+0x98>)
 8005330:	f7fe f9bd 	bl	80036ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005334:	e026      	b.n	8005384 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4413      	add	r3, r2
 800533c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800533e:	4b14      	ldr	r3, [pc, #80]	@ (8005390 <prvAddCurrentTaskToDelayedList+0x94>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	429a      	cmp	r2, r3
 800534c:	d209      	bcs.n	8005362 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800534e:	4b12      	ldr	r3, [pc, #72]	@ (8005398 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	4b0f      	ldr	r3, [pc, #60]	@ (8005390 <prvAddCurrentTaskToDelayedList+0x94>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3304      	adds	r3, #4
 8005358:	4619      	mov	r1, r3
 800535a:	4610      	mov	r0, r2
 800535c:	f7fe f9cb 	bl	80036f6 <vListInsert>
}
 8005360:	e010      	b.n	8005384 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005362:	4b0e      	ldr	r3, [pc, #56]	@ (800539c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4b0a      	ldr	r3, [pc, #40]	@ (8005390 <prvAddCurrentTaskToDelayedList+0x94>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3304      	adds	r3, #4
 800536c:	4619      	mov	r1, r3
 800536e:	4610      	mov	r0, r2
 8005370:	f7fe f9c1 	bl	80036f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005374:	4b0a      	ldr	r3, [pc, #40]	@ (80053a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	429a      	cmp	r2, r3
 800537c:	d202      	bcs.n	8005384 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800537e:	4a08      	ldr	r2, [pc, #32]	@ (80053a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	6013      	str	r3, [r2, #0]
}
 8005384:	bf00      	nop
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20000ca0 	.word	0x20000ca0
 8005390:	200007c8 	.word	0x200007c8
 8005394:	20000c88 	.word	0x20000c88
 8005398:	20000c58 	.word	0x20000c58
 800539c:	20000c54 	.word	0x20000c54
 80053a0:	20000cbc 	.word	0x20000cbc

080053a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08a      	sub	sp, #40	@ 0x28
 80053a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80053aa:	2300      	movs	r3, #0
 80053ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80053ae:	f000 fb21 	bl	80059f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80053b2:	4b1e      	ldr	r3, [pc, #120]	@ (800542c <xTimerCreateTimerTask+0x88>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d021      	beq.n	80053fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80053be:	2300      	movs	r3, #0
 80053c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80053c2:	1d3a      	adds	r2, r7, #4
 80053c4:	f107 0108 	add.w	r1, r7, #8
 80053c8:	f107 030c 	add.w	r3, r7, #12
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fe f927 	bl	8003620 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	9202      	str	r2, [sp, #8]
 80053da:	9301      	str	r3, [sp, #4]
 80053dc:	2302      	movs	r3, #2
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	2300      	movs	r3, #0
 80053e2:	460a      	mov	r2, r1
 80053e4:	4912      	ldr	r1, [pc, #72]	@ (8005430 <xTimerCreateTimerTask+0x8c>)
 80053e6:	4813      	ldr	r0, [pc, #76]	@ (8005434 <xTimerCreateTimerTask+0x90>)
 80053e8:	f7fe ff02 	bl	80041f0 <xTaskCreateStatic>
 80053ec:	4603      	mov	r3, r0
 80053ee:	4a12      	ldr	r2, [pc, #72]	@ (8005438 <xTimerCreateTimerTask+0x94>)
 80053f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80053f2:	4b11      	ldr	r3, [pc, #68]	@ (8005438 <xTimerCreateTimerTask+0x94>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80053fa:	2301      	movs	r3, #1
 80053fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10d      	bne.n	8005420 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005408:	b672      	cpsid	i
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	b662      	cpsie	i
 8005418:	613b      	str	r3, [r7, #16]
}
 800541a:	bf00      	nop
 800541c:	bf00      	nop
 800541e:	e7fd      	b.n	800541c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005420:	697b      	ldr	r3, [r7, #20]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000cf8 	.word	0x20000cf8
 8005430:	0800635c 	.word	0x0800635c
 8005434:	0800557d 	.word	0x0800557d
 8005438:	20000cfc 	.word	0x20000cfc

0800543c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08a      	sub	sp, #40	@ 0x28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800544a:	2300      	movs	r3, #0
 800544c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10d      	bne.n	8005470 <xTimerGenericCommand+0x34>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005458:	b672      	cpsid	i
 800545a:	f383 8811 	msr	BASEPRI, r3
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	b662      	cpsie	i
 8005468:	623b      	str	r3, [r7, #32]
}
 800546a:	bf00      	nop
 800546c:	bf00      	nop
 800546e:	e7fd      	b.n	800546c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005470:	4b19      	ldr	r3, [pc, #100]	@ (80054d8 <xTimerGenericCommand+0x9c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d02a      	beq.n	80054ce <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b05      	cmp	r3, #5
 8005488:	dc18      	bgt.n	80054bc <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800548a:	f7ff fea5 	bl	80051d8 <xTaskGetSchedulerState>
 800548e:	4603      	mov	r3, r0
 8005490:	2b02      	cmp	r3, #2
 8005492:	d109      	bne.n	80054a8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005494:	4b10      	ldr	r3, [pc, #64]	@ (80054d8 <xTimerGenericCommand+0x9c>)
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	f107 0110 	add.w	r1, r7, #16
 800549c:	2300      	movs	r3, #0
 800549e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054a0:	f7fe faa2 	bl	80039e8 <xQueueGenericSend>
 80054a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80054a6:	e012      	b.n	80054ce <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80054a8:	4b0b      	ldr	r3, [pc, #44]	@ (80054d8 <xTimerGenericCommand+0x9c>)
 80054aa:	6818      	ldr	r0, [r3, #0]
 80054ac:	f107 0110 	add.w	r1, r7, #16
 80054b0:	2300      	movs	r3, #0
 80054b2:	2200      	movs	r2, #0
 80054b4:	f7fe fa98 	bl	80039e8 <xQueueGenericSend>
 80054b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80054ba:	e008      	b.n	80054ce <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80054bc:	4b06      	ldr	r3, [pc, #24]	@ (80054d8 <xTimerGenericCommand+0x9c>)
 80054be:	6818      	ldr	r0, [r3, #0]
 80054c0:	f107 0110 	add.w	r1, r7, #16
 80054c4:	2300      	movs	r3, #0
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	f7fe fb98 	bl	8003bfc <xQueueGenericSendFromISR>
 80054cc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3728      	adds	r7, #40	@ 0x28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	20000cf8 	.word	0x20000cf8

080054dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054e6:	4b24      	ldr	r3, [pc, #144]	@ (8005578 <prvProcessExpiredTimer+0x9c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	3304      	adds	r3, #4
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fe f937 	bl	8003768 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d025      	beq.n	8005554 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	699a      	ldr	r2, [r3, #24]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	18d1      	adds	r1, r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	6978      	ldr	r0, [r7, #20]
 8005516:	f000 f8d7 	bl	80056c8 <prvInsertTimerInActiveList>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d022      	beq.n	8005566 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005520:	2300      	movs	r3, #0
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	2300      	movs	r3, #0
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	2100      	movs	r1, #0
 800552a:	6978      	ldr	r0, [r7, #20]
 800552c:	f7ff ff86 	bl	800543c <xTimerGenericCommand>
 8005530:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d116      	bne.n	8005566 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8005538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553c:	b672      	cpsid	i
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	b662      	cpsie	i
 800554c:	60fb      	str	r3, [r7, #12]
}
 800554e:	bf00      	nop
 8005550:	bf00      	nop
 8005552:	e7fd      	b.n	8005550 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800555a:	f023 0301 	bic.w	r3, r3, #1
 800555e:	b2da      	uxtb	r2, r3
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	6978      	ldr	r0, [r7, #20]
 800556c:	4798      	blx	r3
}
 800556e:	bf00      	nop
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20000cf0 	.word	0x20000cf0

0800557c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005584:	f107 0308 	add.w	r3, r7, #8
 8005588:	4618      	mov	r0, r3
 800558a:	f000 f859 	bl	8005640 <prvGetNextExpireTime>
 800558e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4619      	mov	r1, r3
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f805 	bl	80055a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800559a:	f000 f8d7 	bl	800574c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800559e:	bf00      	nop
 80055a0:	e7f0      	b.n	8005584 <prvTimerTask+0x8>
	...

080055a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80055ae:	f7ff fa1b 	bl	80049e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055b2:	f107 0308 	add.w	r3, r7, #8
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 f866 	bl	8005688 <prvSampleTimeNow>
 80055bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d130      	bne.n	8005626 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10a      	bne.n	80055e0 <prvProcessTimerOrBlockTask+0x3c>
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d806      	bhi.n	80055e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80055d2:	f7ff fa17 	bl	8004a04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80055d6:	68f9      	ldr	r1, [r7, #12]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff ff7f 	bl	80054dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80055de:	e024      	b.n	800562a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d008      	beq.n	80055f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80055e6:	4b13      	ldr	r3, [pc, #76]	@ (8005634 <prvProcessTimerOrBlockTask+0x90>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <prvProcessTimerOrBlockTask+0x50>
 80055f0:	2301      	movs	r3, #1
 80055f2:	e000      	b.n	80055f6 <prvProcessTimerOrBlockTask+0x52>
 80055f4:	2300      	movs	r3, #0
 80055f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005638 <prvProcessTimerOrBlockTask+0x94>)
 80055fa:	6818      	ldr	r0, [r3, #0]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	4619      	mov	r1, r3
 8005606:	f7fe fdbf 	bl	8004188 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800560a:	f7ff f9fb 	bl	8004a04 <xTaskResumeAll>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10a      	bne.n	800562a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005614:	4b09      	ldr	r3, [pc, #36]	@ (800563c <prvProcessTimerOrBlockTask+0x98>)
 8005616:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	f3bf 8f6f 	isb	sy
}
 8005624:	e001      	b.n	800562a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005626:	f7ff f9ed 	bl	8004a04 <xTaskResumeAll>
}
 800562a:	bf00      	nop
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20000cf4 	.word	0x20000cf4
 8005638:	20000cf8 	.word	0x20000cf8
 800563c:	e000ed04 	.word	0xe000ed04

08005640 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005648:	4b0e      	ldr	r3, [pc, #56]	@ (8005684 <prvGetNextExpireTime+0x44>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <prvGetNextExpireTime+0x16>
 8005652:	2201      	movs	r2, #1
 8005654:	e000      	b.n	8005658 <prvGetNextExpireTime+0x18>
 8005656:	2200      	movs	r2, #0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d105      	bne.n	8005670 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005664:	4b07      	ldr	r3, [pc, #28]	@ (8005684 <prvGetNextExpireTime+0x44>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	e001      	b.n	8005674 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005674:	68fb      	ldr	r3, [r7, #12]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	20000cf0 	.word	0x20000cf0

08005688 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005690:	f7ff fa58 	bl	8004b44 <xTaskGetTickCount>
 8005694:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005696:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <prvSampleTimeNow+0x3c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	429a      	cmp	r2, r3
 800569e:	d205      	bcs.n	80056ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80056a0:	f000 f940 	bl	8005924 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	e002      	b.n	80056b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80056b2:	4a04      	ldr	r2, [pc, #16]	@ (80056c4 <prvSampleTimeNow+0x3c>)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80056b8:	68fb      	ldr	r3, [r7, #12]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000d00 	.word	0x20000d00

080056c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d812      	bhi.n	8005714 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	1ad2      	subs	r2, r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d302      	bcc.n	8005702 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80056fc:	2301      	movs	r3, #1
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	e01b      	b.n	800573a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005702:	4b10      	ldr	r3, [pc, #64]	@ (8005744 <prvInsertTimerInActiveList+0x7c>)
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3304      	adds	r3, #4
 800570a:	4619      	mov	r1, r3
 800570c:	4610      	mov	r0, r2
 800570e:	f7fd fff2 	bl	80036f6 <vListInsert>
 8005712:	e012      	b.n	800573a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d206      	bcs.n	800572a <prvInsertTimerInActiveList+0x62>
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	429a      	cmp	r2, r3
 8005722:	d302      	bcc.n	800572a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005724:	2301      	movs	r3, #1
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	e007      	b.n	800573a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800572a:	4b07      	ldr	r3, [pc, #28]	@ (8005748 <prvInsertTimerInActiveList+0x80>)
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3304      	adds	r3, #4
 8005732:	4619      	mov	r1, r3
 8005734:	4610      	mov	r0, r2
 8005736:	f7fd ffde 	bl	80036f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800573a:	697b      	ldr	r3, [r7, #20]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	20000cf4 	.word	0x20000cf4
 8005748:	20000cf0 	.word	0x20000cf0

0800574c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08e      	sub	sp, #56	@ 0x38
 8005750:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005752:	e0d4      	b.n	80058fe <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	da1b      	bge.n	8005792 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800575a:	1d3b      	adds	r3, r7, #4
 800575c:	3304      	adds	r3, #4
 800575e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10d      	bne.n	8005782 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8005766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576a:	b672      	cpsid	i
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	b662      	cpsie	i
 800577a:	61fb      	str	r3, [r7, #28]
}
 800577c:	bf00      	nop
 800577e:	bf00      	nop
 8005780:	e7fd      	b.n	800577e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005788:	6850      	ldr	r0, [r2, #4]
 800578a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800578c:	6892      	ldr	r2, [r2, #8]
 800578e:	4611      	mov	r1, r2
 8005790:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	f2c0 80b2 	blt.w	80058fe <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800579e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d004      	beq.n	80057b0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a8:	3304      	adds	r3, #4
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fd ffdc 	bl	8003768 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057b0:	463b      	mov	r3, r7
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7ff ff68 	bl	8005688 <prvSampleTimeNow>
 80057b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b09      	cmp	r3, #9
 80057be:	f200 809b 	bhi.w	80058f8 <prvProcessReceivedCommands+0x1ac>
 80057c2:	a201      	add	r2, pc, #4	@ (adr r2, 80057c8 <prvProcessReceivedCommands+0x7c>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	080057f1 	.word	0x080057f1
 80057cc:	080057f1 	.word	0x080057f1
 80057d0:	080057f1 	.word	0x080057f1
 80057d4:	0800586b 	.word	0x0800586b
 80057d8:	0800587f 	.word	0x0800587f
 80057dc:	080058cf 	.word	0x080058cf
 80057e0:	080057f1 	.word	0x080057f1
 80057e4:	080057f1 	.word	0x080057f1
 80057e8:	0800586b 	.word	0x0800586b
 80057ec:	0800587f 	.word	0x0800587f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057f6:	f043 0301 	orr.w	r3, r3, #1
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	18d1      	adds	r1, r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800580e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005810:	f7ff ff5a 	bl	80056c8 <prvInsertTimerInActiveList>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d070      	beq.n	80058fc <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800581a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005820:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005824:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	d065      	beq.n	80058fc <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	441a      	add	r2, r3
 8005838:	2300      	movs	r3, #0
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	2300      	movs	r3, #0
 800583e:	2100      	movs	r1, #0
 8005840:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005842:	f7ff fdfb 	bl	800543c <xTimerGenericCommand>
 8005846:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d156      	bne.n	80058fc <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005852:	b672      	cpsid	i
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	b662      	cpsie	i
 8005862:	61bb      	str	r3, [r7, #24]
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop
 8005868:	e7fd      	b.n	8005866 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800586a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	b2da      	uxtb	r2, r3
 8005876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005878:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800587c:	e03f      	b.n	80058fe <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800587e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005880:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005884:	f043 0301 	orr.w	r3, r3, #1
 8005888:	b2da      	uxtb	r2, r3
 800588a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005894:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10d      	bne.n	80058ba <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a2:	b672      	cpsid	i
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	b662      	cpsie	i
 80058b2:	617b      	str	r3, [r7, #20]
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop
 80058b8:	e7fd      	b.n	80058b6 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80058ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	18d1      	adds	r1, r2, r3
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058c8:	f7ff fefe 	bl	80056c8 <prvInsertTimerInActiveList>
					break;
 80058cc:	e017      	b.n	80058fe <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80058ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d103      	bne.n	80058e4 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80058dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058de:	f000 fbd1 	bl	8006084 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80058e2:	e00c      	b.n	80058fe <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058ea:	f023 0301 	bic.w	r3, r3, #1
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80058f6:	e002      	b.n	80058fe <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80058f8:	bf00      	nop
 80058fa:	e000      	b.n	80058fe <prvProcessReceivedCommands+0x1b2>
					break;
 80058fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058fe:	4b08      	ldr	r3, [pc, #32]	@ (8005920 <prvProcessReceivedCommands+0x1d4>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	1d39      	adds	r1, r7, #4
 8005904:	2200      	movs	r2, #0
 8005906:	4618      	mov	r0, r3
 8005908:	f7fe fa1c 	bl	8003d44 <xQueueReceive>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	f47f af20 	bne.w	8005754 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005914:	bf00      	nop
 8005916:	bf00      	nop
 8005918:	3730      	adds	r7, #48	@ 0x30
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	20000cf8 	.word	0x20000cf8

08005924 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800592a:	e04b      	b.n	80059c4 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800592c:	4b2f      	ldr	r3, [pc, #188]	@ (80059ec <prvSwitchTimerLists+0xc8>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005936:	4b2d      	ldr	r3, [pc, #180]	@ (80059ec <prvSwitchTimerLists+0xc8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	3304      	adds	r3, #4
 8005944:	4618      	mov	r0, r3
 8005946:	f7fd ff0f 	bl	8003768 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	d031      	beq.n	80059c4 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	4413      	add	r3, r2
 8005968:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	429a      	cmp	r2, r3
 8005970:	d90e      	bls.n	8005990 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800597e:	4b1b      	ldr	r3, [pc, #108]	@ (80059ec <prvSwitchTimerLists+0xc8>)
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3304      	adds	r3, #4
 8005986:	4619      	mov	r1, r3
 8005988:	4610      	mov	r0, r2
 800598a:	f7fd feb4 	bl	80036f6 <vListInsert>
 800598e:	e019      	b.n	80059c4 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005990:	2300      	movs	r3, #0
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	2300      	movs	r3, #0
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	2100      	movs	r1, #0
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f7ff fd4e 	bl	800543c <xTimerGenericCommand>
 80059a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10d      	bne.n	80059c4 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ac:	b672      	cpsid	i
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	b662      	cpsie	i
 80059bc:	603b      	str	r3, [r7, #0]
}
 80059be:	bf00      	nop
 80059c0:	bf00      	nop
 80059c2:	e7fd      	b.n	80059c0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059c4:	4b09      	ldr	r3, [pc, #36]	@ (80059ec <prvSwitchTimerLists+0xc8>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1ae      	bne.n	800592c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80059ce:	4b07      	ldr	r3, [pc, #28]	@ (80059ec <prvSwitchTimerLists+0xc8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80059d4:	4b06      	ldr	r3, [pc, #24]	@ (80059f0 <prvSwitchTimerLists+0xcc>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a04      	ldr	r2, [pc, #16]	@ (80059ec <prvSwitchTimerLists+0xc8>)
 80059da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80059dc:	4a04      	ldr	r2, [pc, #16]	@ (80059f0 <prvSwitchTimerLists+0xcc>)
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	6013      	str	r3, [r2, #0]
}
 80059e2:	bf00      	nop
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	20000cf0 	.word	0x20000cf0
 80059f0:	20000cf4 	.word	0x20000cf4

080059f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80059fa:	f000 f947 	bl	8005c8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80059fe:	4b15      	ldr	r3, [pc, #84]	@ (8005a54 <prvCheckForValidListAndQueue+0x60>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d120      	bne.n	8005a48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a06:	4814      	ldr	r0, [pc, #80]	@ (8005a58 <prvCheckForValidListAndQueue+0x64>)
 8005a08:	f7fd fe24 	bl	8003654 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a0c:	4813      	ldr	r0, [pc, #76]	@ (8005a5c <prvCheckForValidListAndQueue+0x68>)
 8005a0e:	f7fd fe21 	bl	8003654 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a12:	4b13      	ldr	r3, [pc, #76]	@ (8005a60 <prvCheckForValidListAndQueue+0x6c>)
 8005a14:	4a10      	ldr	r2, [pc, #64]	@ (8005a58 <prvCheckForValidListAndQueue+0x64>)
 8005a16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a18:	4b12      	ldr	r3, [pc, #72]	@ (8005a64 <prvCheckForValidListAndQueue+0x70>)
 8005a1a:	4a10      	ldr	r2, [pc, #64]	@ (8005a5c <prvCheckForValidListAndQueue+0x68>)
 8005a1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005a1e:	2300      	movs	r3, #0
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	4b11      	ldr	r3, [pc, #68]	@ (8005a68 <prvCheckForValidListAndQueue+0x74>)
 8005a24:	4a11      	ldr	r2, [pc, #68]	@ (8005a6c <prvCheckForValidListAndQueue+0x78>)
 8005a26:	2110      	movs	r1, #16
 8005a28:	200a      	movs	r0, #10
 8005a2a:	f7fd ff33 	bl	8003894 <xQueueGenericCreateStatic>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	4a08      	ldr	r2, [pc, #32]	@ (8005a54 <prvCheckForValidListAndQueue+0x60>)
 8005a32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a34:	4b07      	ldr	r3, [pc, #28]	@ (8005a54 <prvCheckForValidListAndQueue+0x60>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a3c:	4b05      	ldr	r3, [pc, #20]	@ (8005a54 <prvCheckForValidListAndQueue+0x60>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	490b      	ldr	r1, [pc, #44]	@ (8005a70 <prvCheckForValidListAndQueue+0x7c>)
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fe fb76 	bl	8004134 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a48:	f000 f956 	bl	8005cf8 <vPortExitCritical>
}
 8005a4c:	bf00      	nop
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	20000cf8 	.word	0x20000cf8
 8005a58:	20000cc8 	.word	0x20000cc8
 8005a5c:	20000cdc 	.word	0x20000cdc
 8005a60:	20000cf0 	.word	0x20000cf0
 8005a64:	20000cf4 	.word	0x20000cf4
 8005a68:	20000da4 	.word	0x20000da4
 8005a6c:	20000d04 	.word	0x20000d04
 8005a70:	08006364 	.word	0x08006364

08005a74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3b04      	subs	r3, #4
 8005a84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005a8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3b04      	subs	r3, #4
 8005a92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f023 0201 	bic.w	r2, r3, #1
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3b04      	subs	r3, #4
 8005aa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8005ad8 <pxPortInitialiseStack+0x64>)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3b14      	subs	r3, #20
 8005aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3b04      	subs	r3, #4
 8005aba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f06f 0202 	mvn.w	r2, #2
 8005ac2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3b20      	subs	r3, #32
 8005ac8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005aca:	68fb      	ldr	r3, [r7, #12]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	08005add 	.word	0x08005add

08005adc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ae6:	4b15      	ldr	r3, [pc, #84]	@ (8005b3c <prvTaskExitError+0x60>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aee:	d00d      	beq.n	8005b0c <prvTaskExitError+0x30>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af4:	b672      	cpsid	i
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	b662      	cpsie	i
 8005b04:	60fb      	str	r3, [r7, #12]
}
 8005b06:	bf00      	nop
 8005b08:	bf00      	nop
 8005b0a:	e7fd      	b.n	8005b08 <prvTaskExitError+0x2c>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b10:	b672      	cpsid	i
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	b662      	cpsie	i
 8005b20:	60bb      	str	r3, [r7, #8]
}
 8005b22:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b24:	bf00      	nop
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0fc      	beq.n	8005b26 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b2c:	bf00      	nop
 8005b2e:	bf00      	nop
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	20000008 	.word	0x20000008

08005b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b40:	4b07      	ldr	r3, [pc, #28]	@ (8005b60 <pxCurrentTCBConst2>)
 8005b42:	6819      	ldr	r1, [r3, #0]
 8005b44:	6808      	ldr	r0, [r1, #0]
 8005b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4a:	f380 8809 	msr	PSP, r0
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f04f 0000 	mov.w	r0, #0
 8005b56:	f380 8811 	msr	BASEPRI, r0
 8005b5a:	4770      	bx	lr
 8005b5c:	f3af 8000 	nop.w

08005b60 <pxCurrentTCBConst2>:
 8005b60:	200007c8 	.word	0x200007c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop

08005b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b68:	4808      	ldr	r0, [pc, #32]	@ (8005b8c <prvPortStartFirstTask+0x24>)
 8005b6a:	6800      	ldr	r0, [r0, #0]
 8005b6c:	6800      	ldr	r0, [r0, #0]
 8005b6e:	f380 8808 	msr	MSP, r0
 8005b72:	f04f 0000 	mov.w	r0, #0
 8005b76:	f380 8814 	msr	CONTROL, r0
 8005b7a:	b662      	cpsie	i
 8005b7c:	b661      	cpsie	f
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	df00      	svc	0
 8005b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b8a:	bf00      	nop
 8005b8c:	e000ed08 	.word	0xe000ed08

08005b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b96:	4b37      	ldr	r3, [pc, #220]	@ (8005c74 <xPortStartScheduler+0xe4>)
 8005b98:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	22ff      	movs	r2, #255	@ 0xff
 8005ba6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	4b2f      	ldr	r3, [pc, #188]	@ (8005c78 <xPortStartScheduler+0xe8>)
 8005bbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8005c7c <xPortStartScheduler+0xec>)
 8005bc0:	2207      	movs	r2, #7
 8005bc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bc4:	e009      	b.n	8005bda <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8005c7c <xPortStartScheduler+0xec>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	4a2b      	ldr	r2, [pc, #172]	@ (8005c7c <xPortStartScheduler+0xec>)
 8005bce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bda:	78fb      	ldrb	r3, [r7, #3]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005be2:	2b80      	cmp	r3, #128	@ 0x80
 8005be4:	d0ef      	beq.n	8005bc6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005be6:	4b25      	ldr	r3, [pc, #148]	@ (8005c7c <xPortStartScheduler+0xec>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f1c3 0307 	rsb	r3, r3, #7
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	d00d      	beq.n	8005c0e <xPortStartScheduler+0x7e>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf6:	b672      	cpsid	i
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	b662      	cpsie	i
 8005c06:	60bb      	str	r3, [r7, #8]
}
 8005c08:	bf00      	nop
 8005c0a:	bf00      	nop
 8005c0c:	e7fd      	b.n	8005c0a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8005c7c <xPortStartScheduler+0xec>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	4a19      	ldr	r2, [pc, #100]	@ (8005c7c <xPortStartScheduler+0xec>)
 8005c16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c18:	4b18      	ldr	r3, [pc, #96]	@ (8005c7c <xPortStartScheduler+0xec>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c20:	4a16      	ldr	r2, [pc, #88]	@ (8005c7c <xPortStartScheduler+0xec>)
 8005c22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c2c:	4b14      	ldr	r3, [pc, #80]	@ (8005c80 <xPortStartScheduler+0xf0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a13      	ldr	r2, [pc, #76]	@ (8005c80 <xPortStartScheduler+0xf0>)
 8005c32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005c36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c38:	4b11      	ldr	r3, [pc, #68]	@ (8005c80 <xPortStartScheduler+0xf0>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a10      	ldr	r2, [pc, #64]	@ (8005c80 <xPortStartScheduler+0xf0>)
 8005c3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005c42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c44:	f000 f8dc 	bl	8005e00 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c48:	4b0e      	ldr	r3, [pc, #56]	@ (8005c84 <xPortStartScheduler+0xf4>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c4e:	f000 f8fb 	bl	8005e48 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c52:	4b0d      	ldr	r3, [pc, #52]	@ (8005c88 <xPortStartScheduler+0xf8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a0c      	ldr	r2, [pc, #48]	@ (8005c88 <xPortStartScheduler+0xf8>)
 8005c58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005c5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c5e:	f7ff ff83 	bl	8005b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c62:	f7ff f83b 	bl	8004cdc <vTaskSwitchContext>
	prvTaskExitError();
 8005c66:	f7ff ff39 	bl	8005adc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	e000e400 	.word	0xe000e400
 8005c78:	20000df4 	.word	0x20000df4
 8005c7c:	20000df8 	.word	0x20000df8
 8005c80:	e000ed20 	.word	0xe000ed20
 8005c84:	20000008 	.word	0x20000008
 8005c88:	e000ef34 	.word	0xe000ef34

08005c8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
	__asm volatile
 8005c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c96:	b672      	cpsid	i
 8005c98:	f383 8811 	msr	BASEPRI, r3
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	b662      	cpsie	i
 8005ca6:	607b      	str	r3, [r7, #4]
}
 8005ca8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005caa:	4b11      	ldr	r3, [pc, #68]	@ (8005cf0 <vPortEnterCritical+0x64>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	4a0f      	ldr	r2, [pc, #60]	@ (8005cf0 <vPortEnterCritical+0x64>)
 8005cb2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8005cf0 <vPortEnterCritical+0x64>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d112      	bne.n	8005ce2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf4 <vPortEnterCritical+0x68>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00d      	beq.n	8005ce2 <vPortEnterCritical+0x56>
	__asm volatile
 8005cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cca:	b672      	cpsid	i
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	b662      	cpsie	i
 8005cda:	603b      	str	r3, [r7, #0]
}
 8005cdc:	bf00      	nop
 8005cde:	bf00      	nop
 8005ce0:	e7fd      	b.n	8005cde <vPortEnterCritical+0x52>
	}
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	20000008 	.word	0x20000008
 8005cf4:	e000ed04 	.word	0xe000ed04

08005cf8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cfe:	4b13      	ldr	r3, [pc, #76]	@ (8005d4c <vPortExitCritical+0x54>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10d      	bne.n	8005d22 <vPortExitCritical+0x2a>
	__asm volatile
 8005d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0a:	b672      	cpsid	i
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	b662      	cpsie	i
 8005d1a:	607b      	str	r3, [r7, #4]
}
 8005d1c:	bf00      	nop
 8005d1e:	bf00      	nop
 8005d20:	e7fd      	b.n	8005d1e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005d22:	4b0a      	ldr	r3, [pc, #40]	@ (8005d4c <vPortExitCritical+0x54>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	4a08      	ldr	r2, [pc, #32]	@ (8005d4c <vPortExitCritical+0x54>)
 8005d2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d2c:	4b07      	ldr	r3, [pc, #28]	@ (8005d4c <vPortExitCritical+0x54>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d105      	bne.n	8005d40 <vPortExitCritical+0x48>
 8005d34:	2300      	movs	r3, #0
 8005d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	f383 8811 	msr	BASEPRI, r3
}
 8005d3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	20000008 	.word	0x20000008

08005d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d50:	f3ef 8009 	mrs	r0, PSP
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	4b15      	ldr	r3, [pc, #84]	@ (8005db0 <pxCurrentTCBConst>)
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	f01e 0f10 	tst.w	lr, #16
 8005d60:	bf08      	it	eq
 8005d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6a:	6010      	str	r0, [r2, #0]
 8005d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005d74:	b672      	cpsid	i
 8005d76:	f380 8811 	msr	BASEPRI, r0
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	b662      	cpsie	i
 8005d84:	f7fe ffaa 	bl	8004cdc <vTaskSwitchContext>
 8005d88:	f04f 0000 	mov.w	r0, #0
 8005d8c:	f380 8811 	msr	BASEPRI, r0
 8005d90:	bc09      	pop	{r0, r3}
 8005d92:	6819      	ldr	r1, [r3, #0]
 8005d94:	6808      	ldr	r0, [r1, #0]
 8005d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9a:	f01e 0f10 	tst.w	lr, #16
 8005d9e:	bf08      	it	eq
 8005da0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005da4:	f380 8809 	msr	PSP, r0
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop

08005db0 <pxCurrentTCBConst>:
 8005db0:	200007c8 	.word	0x200007c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop

08005db8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc2:	b672      	cpsid	i
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	b662      	cpsie	i
 8005dd2:	607b      	str	r3, [r7, #4]
}
 8005dd4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005dd6:	f7fe fec5 	bl	8004b64 <xTaskIncrementTick>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005de0:	4b06      	ldr	r3, [pc, #24]	@ (8005dfc <SysTick_Handler+0x44>)
 8005de2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	2300      	movs	r3, #0
 8005dea:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	f383 8811 	msr	BASEPRI, r3
}
 8005df2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005df4:	bf00      	nop
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	e000ed04 	.word	0xe000ed04

08005e00 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e04:	4b0b      	ldr	r3, [pc, #44]	@ (8005e34 <vPortSetupTimerInterrupt+0x34>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e38 <vPortSetupTimerInterrupt+0x38>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e10:	4b0a      	ldr	r3, [pc, #40]	@ (8005e3c <vPortSetupTimerInterrupt+0x3c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a0a      	ldr	r2, [pc, #40]	@ (8005e40 <vPortSetupTimerInterrupt+0x40>)
 8005e16:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1a:	099b      	lsrs	r3, r3, #6
 8005e1c:	4a09      	ldr	r2, [pc, #36]	@ (8005e44 <vPortSetupTimerInterrupt+0x44>)
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e22:	4b04      	ldr	r3, [pc, #16]	@ (8005e34 <vPortSetupTimerInterrupt+0x34>)
 8005e24:	2207      	movs	r2, #7
 8005e26:	601a      	str	r2, [r3, #0]
}
 8005e28:	bf00      	nop
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	e000e010 	.word	0xe000e010
 8005e38:	e000e018 	.word	0xe000e018
 8005e3c:	20000000 	.word	0x20000000
 8005e40:	10624dd3 	.word	0x10624dd3
 8005e44:	e000e014 	.word	0xe000e014

08005e48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e48:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005e58 <vPortEnableVFP+0x10>
 8005e4c:	6801      	ldr	r1, [r0, #0]
 8005e4e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005e52:	6001      	str	r1, [r0, #0]
 8005e54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e56:	bf00      	nop
 8005e58:	e000ed88 	.word	0xe000ed88

08005e5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e62:	f3ef 8305 	mrs	r3, IPSR
 8005e66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2b0f      	cmp	r3, #15
 8005e6c:	d917      	bls.n	8005e9e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ed8 <vPortValidateInterruptPriority+0x7c>)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4413      	add	r3, r2
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e78:	4b18      	ldr	r3, [pc, #96]	@ (8005edc <vPortValidateInterruptPriority+0x80>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	7afa      	ldrb	r2, [r7, #11]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d20d      	bcs.n	8005e9e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e86:	b672      	cpsid	i
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	b662      	cpsie	i
 8005e96:	607b      	str	r3, [r7, #4]
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	e7fd      	b.n	8005e9a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e9e:	4b10      	ldr	r3, [pc, #64]	@ (8005ee0 <vPortValidateInterruptPriority+0x84>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8005ee4 <vPortValidateInterruptPriority+0x88>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d90d      	bls.n	8005eca <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb2:	b672      	cpsid	i
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	b662      	cpsie	i
 8005ec2:	603b      	str	r3, [r7, #0]
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop
 8005ec8:	e7fd      	b.n	8005ec6 <vPortValidateInterruptPriority+0x6a>
	}
 8005eca:	bf00      	nop
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	e000e3f0 	.word	0xe000e3f0
 8005edc:	20000df4 	.word	0x20000df4
 8005ee0:	e000ed0c 	.word	0xe000ed0c
 8005ee4:	20000df8 	.word	0x20000df8

08005ee8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08a      	sub	sp, #40	@ 0x28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ef4:	f7fe fd78 	bl	80049e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ef8:	4b5d      	ldr	r3, [pc, #372]	@ (8006070 <pvPortMalloc+0x188>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f00:	f000 f920 	bl	8006144 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f04:	4b5b      	ldr	r3, [pc, #364]	@ (8006074 <pvPortMalloc+0x18c>)
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f040 8094 	bne.w	800603a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d020      	beq.n	8005f5a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8005f18:	2208      	movs	r2, #8
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d017      	beq.n	8005f5a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f023 0307 	bic.w	r3, r3, #7
 8005f30:	3308      	adds	r3, #8
 8005f32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00d      	beq.n	8005f5a <pvPortMalloc+0x72>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f42:	b672      	cpsid	i
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	b662      	cpsie	i
 8005f52:	617b      	str	r3, [r7, #20]
}
 8005f54:	bf00      	nop
 8005f56:	bf00      	nop
 8005f58:	e7fd      	b.n	8005f56 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d06c      	beq.n	800603a <pvPortMalloc+0x152>
 8005f60:	4b45      	ldr	r3, [pc, #276]	@ (8006078 <pvPortMalloc+0x190>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d867      	bhi.n	800603a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f6a:	4b44      	ldr	r3, [pc, #272]	@ (800607c <pvPortMalloc+0x194>)
 8005f6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f6e:	4b43      	ldr	r3, [pc, #268]	@ (800607c <pvPortMalloc+0x194>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f74:	e004      	b.n	8005f80 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8005f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d903      	bls.n	8005f92 <pvPortMalloc+0xaa>
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1f1      	bne.n	8005f76 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f92:	4b37      	ldr	r3, [pc, #220]	@ (8006070 <pvPortMalloc+0x188>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d04e      	beq.n	800603a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2208      	movs	r2, #8
 8005fa2:	4413      	add	r3, r2
 8005fa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	1ad2      	subs	r2, r2, r3
 8005fb6:	2308      	movs	r3, #8
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d922      	bls.n	8006004 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	f003 0307 	and.w	r3, r3, #7
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00d      	beq.n	8005fec <pvPortMalloc+0x104>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd4:	b672      	cpsid	i
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	b662      	cpsie	i
 8005fe4:	613b      	str	r3, [r7, #16]
}
 8005fe6:	bf00      	nop
 8005fe8:	bf00      	nop
 8005fea:	e7fd      	b.n	8005fe8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	1ad2      	subs	r2, r2, r3
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ffe:	69b8      	ldr	r0, [r7, #24]
 8006000:	f000 f902 	bl	8006208 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006004:	4b1c      	ldr	r3, [pc, #112]	@ (8006078 <pvPortMalloc+0x190>)
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	4a1a      	ldr	r2, [pc, #104]	@ (8006078 <pvPortMalloc+0x190>)
 8006010:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006012:	4b19      	ldr	r3, [pc, #100]	@ (8006078 <pvPortMalloc+0x190>)
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	4b1a      	ldr	r3, [pc, #104]	@ (8006080 <pvPortMalloc+0x198>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d203      	bcs.n	8006026 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800601e:	4b16      	ldr	r3, [pc, #88]	@ (8006078 <pvPortMalloc+0x190>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a17      	ldr	r2, [pc, #92]	@ (8006080 <pvPortMalloc+0x198>)
 8006024:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	4b12      	ldr	r3, [pc, #72]	@ (8006074 <pvPortMalloc+0x18c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	431a      	orrs	r2, r3
 8006030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006032:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006036:	2200      	movs	r2, #0
 8006038:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800603a:	f7fe fce3 	bl	8004a04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	f003 0307 	and.w	r3, r3, #7
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00d      	beq.n	8006064 <pvPortMalloc+0x17c>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604c:	b672      	cpsid	i
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	b662      	cpsie	i
 800605c:	60fb      	str	r3, [r7, #12]
}
 800605e:	bf00      	nop
 8006060:	bf00      	nop
 8006062:	e7fd      	b.n	8006060 <pvPortMalloc+0x178>
	return pvReturn;
 8006064:	69fb      	ldr	r3, [r7, #28]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3728      	adds	r7, #40	@ 0x28
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20004a04 	.word	0x20004a04
 8006074:	20004a10 	.word	0x20004a10
 8006078:	20004a08 	.word	0x20004a08
 800607c:	200049fc 	.word	0x200049fc
 8006080:	20004a0c 	.word	0x20004a0c

08006084 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d04e      	beq.n	8006134 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006096:	2308      	movs	r3, #8
 8006098:	425b      	negs	r3, r3
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4413      	add	r3, r2
 800609e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	4b24      	ldr	r3, [pc, #144]	@ (800613c <vPortFree+0xb8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4013      	ands	r3, r2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10d      	bne.n	80060ce <vPortFree+0x4a>
	__asm volatile
 80060b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b6:	b672      	cpsid	i
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	b662      	cpsie	i
 80060c6:	60fb      	str	r3, [r7, #12]
}
 80060c8:	bf00      	nop
 80060ca:	bf00      	nop
 80060cc:	e7fd      	b.n	80060ca <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00d      	beq.n	80060f2 <vPortFree+0x6e>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060da:	b672      	cpsid	i
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	b662      	cpsie	i
 80060ea:	60bb      	str	r3, [r7, #8]
}
 80060ec:	bf00      	nop
 80060ee:	bf00      	nop
 80060f0:	e7fd      	b.n	80060ee <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	4b11      	ldr	r3, [pc, #68]	@ (800613c <vPortFree+0xb8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4013      	ands	r3, r2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d019      	beq.n	8006134 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d115      	bne.n	8006134 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	4b0b      	ldr	r3, [pc, #44]	@ (800613c <vPortFree+0xb8>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	43db      	mvns	r3, r3
 8006112:	401a      	ands	r2, r3
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006118:	f7fe fc66 	bl	80049e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	4b07      	ldr	r3, [pc, #28]	@ (8006140 <vPortFree+0xbc>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4413      	add	r3, r2
 8006126:	4a06      	ldr	r2, [pc, #24]	@ (8006140 <vPortFree+0xbc>)
 8006128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800612a:	6938      	ldr	r0, [r7, #16]
 800612c:	f000 f86c 	bl	8006208 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006130:	f7fe fc68 	bl	8004a04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006134:	bf00      	nop
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20004a10 	.word	0x20004a10
 8006140:	20004a08 	.word	0x20004a08

08006144 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800614a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800614e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006150:	4b27      	ldr	r3, [pc, #156]	@ (80061f0 <prvHeapInit+0xac>)
 8006152:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00c      	beq.n	8006178 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3307      	adds	r3, #7
 8006162:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0307 	bic.w	r3, r3, #7
 800616a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	4a1f      	ldr	r2, [pc, #124]	@ (80061f0 <prvHeapInit+0xac>)
 8006174:	4413      	add	r3, r2
 8006176:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800617c:	4a1d      	ldr	r2, [pc, #116]	@ (80061f4 <prvHeapInit+0xb0>)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006182:	4b1c      	ldr	r3, [pc, #112]	@ (80061f4 <prvHeapInit+0xb0>)
 8006184:	2200      	movs	r2, #0
 8006186:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	4413      	add	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006190:	2208      	movs	r2, #8
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	1a9b      	subs	r3, r3, r2
 8006196:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 0307 	bic.w	r3, r3, #7
 800619e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4a15      	ldr	r2, [pc, #84]	@ (80061f8 <prvHeapInit+0xb4>)
 80061a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80061a6:	4b14      	ldr	r3, [pc, #80]	@ (80061f8 <prvHeapInit+0xb4>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2200      	movs	r2, #0
 80061ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061ae:	4b12      	ldr	r3, [pc, #72]	@ (80061f8 <prvHeapInit+0xb4>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	1ad2      	subs	r2, r2, r3
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061c4:	4b0c      	ldr	r3, [pc, #48]	@ (80061f8 <prvHeapInit+0xb4>)
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	4a0a      	ldr	r2, [pc, #40]	@ (80061fc <prvHeapInit+0xb8>)
 80061d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	4a09      	ldr	r2, [pc, #36]	@ (8006200 <prvHeapInit+0xbc>)
 80061da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061dc:	4b09      	ldr	r3, [pc, #36]	@ (8006204 <prvHeapInit+0xc0>)
 80061de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80061e2:	601a      	str	r2, [r3, #0]
}
 80061e4:	bf00      	nop
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	20000dfc 	.word	0x20000dfc
 80061f4:	200049fc 	.word	0x200049fc
 80061f8:	20004a04 	.word	0x20004a04
 80061fc:	20004a0c 	.word	0x20004a0c
 8006200:	20004a08 	.word	0x20004a08
 8006204:	20004a10 	.word	0x20004a10

08006208 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006210:	4b28      	ldr	r3, [pc, #160]	@ (80062b4 <prvInsertBlockIntoFreeList+0xac>)
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	e002      	b.n	800621c <prvInsertBlockIntoFreeList+0x14>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	429a      	cmp	r2, r3
 8006224:	d8f7      	bhi.n	8006216 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	4413      	add	r3, r2
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	429a      	cmp	r2, r3
 8006236:	d108      	bne.n	800624a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	441a      	add	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	441a      	add	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	429a      	cmp	r2, r3
 800625c:	d118      	bne.n	8006290 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	4b15      	ldr	r3, [pc, #84]	@ (80062b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	429a      	cmp	r2, r3
 8006268:	d00d      	beq.n	8006286 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	441a      	add	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	e008      	b.n	8006298 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006286:	4b0c      	ldr	r3, [pc, #48]	@ (80062b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	e003      	b.n	8006298 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	429a      	cmp	r2, r3
 800629e:	d002      	beq.n	80062a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062a6:	bf00      	nop
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	200049fc 	.word	0x200049fc
 80062b8:	20004a04 	.word	0x20004a04

080062bc <memset>:
 80062bc:	4402      	add	r2, r0
 80062be:	4603      	mov	r3, r0
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d100      	bne.n	80062c6 <memset+0xa>
 80062c4:	4770      	bx	lr
 80062c6:	f803 1b01 	strb.w	r1, [r3], #1
 80062ca:	e7f9      	b.n	80062c0 <memset+0x4>

080062cc <__libc_init_array>:
 80062cc:	b570      	push	{r4, r5, r6, lr}
 80062ce:	4d0d      	ldr	r5, [pc, #52]	@ (8006304 <__libc_init_array+0x38>)
 80062d0:	4c0d      	ldr	r4, [pc, #52]	@ (8006308 <__libc_init_array+0x3c>)
 80062d2:	1b64      	subs	r4, r4, r5
 80062d4:	10a4      	asrs	r4, r4, #2
 80062d6:	2600      	movs	r6, #0
 80062d8:	42a6      	cmp	r6, r4
 80062da:	d109      	bne.n	80062f0 <__libc_init_array+0x24>
 80062dc:	4d0b      	ldr	r5, [pc, #44]	@ (800630c <__libc_init_array+0x40>)
 80062de:	4c0c      	ldr	r4, [pc, #48]	@ (8006310 <__libc_init_array+0x44>)
 80062e0:	f000 f826 	bl	8006330 <_init>
 80062e4:	1b64      	subs	r4, r4, r5
 80062e6:	10a4      	asrs	r4, r4, #2
 80062e8:	2600      	movs	r6, #0
 80062ea:	42a6      	cmp	r6, r4
 80062ec:	d105      	bne.n	80062fa <__libc_init_array+0x2e>
 80062ee:	bd70      	pop	{r4, r5, r6, pc}
 80062f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062f4:	4798      	blx	r3
 80062f6:	3601      	adds	r6, #1
 80062f8:	e7ee      	b.n	80062d8 <__libc_init_array+0xc>
 80062fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80062fe:	4798      	blx	r3
 8006300:	3601      	adds	r6, #1
 8006302:	e7f2      	b.n	80062ea <__libc_init_array+0x1e>
 8006304:	0800638c 	.word	0x0800638c
 8006308:	0800638c 	.word	0x0800638c
 800630c:	0800638c 	.word	0x0800638c
 8006310:	08006390 	.word	0x08006390

08006314 <memcpy>:
 8006314:	440a      	add	r2, r1
 8006316:	4291      	cmp	r1, r2
 8006318:	f100 33ff 	add.w	r3, r0, #4294967295
 800631c:	d100      	bne.n	8006320 <memcpy+0xc>
 800631e:	4770      	bx	lr
 8006320:	b510      	push	{r4, lr}
 8006322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006326:	f803 4f01 	strb.w	r4, [r3, #1]!
 800632a:	4291      	cmp	r1, r2
 800632c:	d1f9      	bne.n	8006322 <memcpy+0xe>
 800632e:	bd10      	pop	{r4, pc}

08006330 <_init>:
 8006330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006332:	bf00      	nop
 8006334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006336:	bc08      	pop	{r3}
 8006338:	469e      	mov	lr, r3
 800633a:	4770      	bx	lr

0800633c <_fini>:
 800633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633e:	bf00      	nop
 8006340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006342:	bc08      	pop	{r3}
 8006344:	469e      	mov	lr, r3
 8006346:	4770      	bx	lr
